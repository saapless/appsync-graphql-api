type Product @model(operations: [get, list]) @auth(allow: public, operations: [get, list]) {
  # Attributes
  name: String
  description: String
  price: Float

  # Connections
  images: Image @edges
  categories: Category @connection(relation: "manyMany")
}

type Category @model(operations: [get, list]) @auth(allow: public, operations: [get, list]) {
  # Attributes
  name: String
  description: string

  # Connections
  products: Product @edges
}

type Collection @model(operations: [get, list]) @auth(allow: public, operations: [get, list]) {
  name: String
  slug: String
  products: Product @edges
}

type Image @model(operations: []) @auth(allow: public, operations: [get, list]) {
  name: String
  url: String
}

type Cart @model @auth(allow: owner) {
  items: CartItem @edges
}

type CartItem @model @auth(allow: owner) {
  quantity: Int
  product: Product @node
}

type Order @model @auth(allow: owner) {
  # Attributes
  status: OrderStatus

  # Connections
  cart: Cart @node
  transaction: Transaction @node
}

enum OrderStatus {
  CREATED
  CHECKOUT_INITIATED
  CHECKOUT_COMPLETED
  SHIPPED
  DELIVERED
}

type Transaction @model @auth(allow: owner) {
  # Attributes
  amount: Float
  status: TransactionStatus

  # Connections
  order: Order @node
}

enum TransactionStatus {
  PENDING
  COMPLETED
  REGECTED
}

type User @model(operations: [update]) @auth(allow: owner) {
  # Attributes
  firstName: String
  lastName: String
  email: String

  # Connections
  orders: Order @edges
}

type Query {
  me: User @connection(relation: "oneOne", key: "id", ref: "identity.sub")
  cart: Cart @connection(relation: "oneOne", key: "userId", ref: "identity.sub")
  wishlist: Product
    @connection(relation: "manyMany", key: "sourceId", ref: "identity.sub", index: "bySourceId")
}
