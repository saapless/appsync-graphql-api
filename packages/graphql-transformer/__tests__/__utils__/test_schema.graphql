enum UserStatus {
  ACTIVE
  DISABLED
  SUSPENDED
}

type User @model {
  id: ID!

  firstName: String
  lastName: String
  email: AWSEmail
  picture: AWSURL
  status: UserStatus @readonly
}

type Task @model(operations: [upsert, delete]) {
  id: ID!

  title: String
  content: AWSJSON
  schedule: Schedule
  rrule: RRule
  recurrenceId: ID
  occurrenceId: String

  # Connections
  labels: Label @connection(relation: "manyMany")
  subtasks: Task @edges
  artifacts: Artifact @edges
  occurrences: Task @edges
}

type RRule {
  dtStart: AWSDateTime
  until: AWSDateTime
  ruleStr: String
}

type Schedule {
  startDate: DateTimeZone
  duration: String
  dueDate: DateTimeZone
}

type DateTimeZone {
  date: AWSDateTime
  timezone: String
}

type Label @model(operations: [upsert, delete]) {
  id: ID!
  name: String
  color: String
}

type File @model(operations: [upsert, delete]) {
  name: String
  size: Int
  url: AWSURL
  mimeType: String
}

type TimeTracker @model(operations: [upsert, delete]) {
  duration: String
  logs: [TimeLog!]
}

type TimeLog {
  action: TimeLogAction!
  timestamp: AWSTimestamp!
}

enum TimeLogAction {
  START
  PAUSE
  END
  LOG
}

union Artifact = File | TimeTracker

type Viewer {
  user: User @node(key: "id", ref: "identity.sub")
  tasks: Task @edges(key: "sourceId", ref: "identity.sub", index: "bySourceId")
  labels: Label @edges(key: "sourceId", ref: "identity.sub", index: "bySourceId")
}

type Query {
  viewer: Viewer!
}
