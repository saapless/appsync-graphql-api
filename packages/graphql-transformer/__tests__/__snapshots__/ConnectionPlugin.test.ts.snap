// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConnectionPlugin matches snapshot 1`] = `
"type User {
  id: ID!
  username: String!
}

type Todo {
  id: ID
  content: String
  resources(filter: ResourceEdgeFilterInput, first: Int, after: String, sort: SortDirection): ResourceConnection!
  sourceId: ID @writeOnly
}

type Document {
  url: String!
  sourceId: ID @writeOnly
}

type Message {
  content: String!
  sourceId: ID @writeOnly
}

union Resource = Document | Message

type Query {
  me: User
  todos(filter: TodoFilterInput, first: Int, after: String, sort: SortDirection): TodoConnection!
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

input SizeFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int!]
}

input StringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  notContains: String
  between: [String!]
  beginsWith: String
  attributeExists: Boolean
  size: SizeFilterInput
}

input IntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int!]
  between: [Int!]
  attributeExists: Boolean
}

input FloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  in: [Float!]
  between: [Float!]
  attributeExists: Boolean
}

input BooleanFilterInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
}

input IDFilterInput {
  ne: ID
  eq: ID
  in: [ID!]
  attributeExists: Boolean
}

input ListFilterInput {
  contains: String
  notContains: String
  size: SizeFilterInput
}

enum SortDirection {
  ASC
  DESC
}

type TodoConnection {
  edges: [TodoEdge!]!
  pageInfo: PageInfo!
}

type TodoEdge {
  cursor: String @clientOnly
  node: Todo @clientOnly
}

input TodoFilterInput {
  id: IDFilterInput
  content: StringFilterInput
  and: [TodoFilterInput]
  or: [TodoFilterInput]
  not: TodoFilterInput
}

type ResourceConnection {
  edges: [ResourceEdge!]!
  pageInfo: PageInfo!
  keys: [Node] @serverOnly
}

type ResourceEdge {
  cursor: String @clientOnly
  node: Resource @clientOnly
  id: ID! @serverOnly
  sourceId: ID! @writeOnly
  targetId: ID! @writeOnly
  createdAt: AWSDateTime! @filterOnly
  updatedAt: AWSDateTime! @filterOnly
}

input ResourceEdgeFilterInput {
  createdAt: StringFilterInput
  updatedAt: StringFilterInput
  and: [ResourceEdgeFilterInput]
  or: [ResourceEdgeFilterInput]
  not: ResourceEdgeFilterInput
}

input ResourceEdgeInput {
  sourceId: ID!
  targetId: ID!
}

type Mutation {
  createResourceEdge(input: ResourceEdgeInput!): ResourceEdge
  deleteResourceEdge(input: ResourceEdgeInput!): ResourceEdge
}"
`;
