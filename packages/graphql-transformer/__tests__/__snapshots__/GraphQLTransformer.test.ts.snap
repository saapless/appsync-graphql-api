// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GraphQLTransformer runs schema transformations return result 1`] = `
{
  "fieldResolvers": [
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.createUser.ts
import { put } from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  const id = ctx.args.input.id ?? util.autoId();
  const timestamp = util.time.nowISO8601();
  const values = {
    ...ctx.args.input,
    id,
    createdAt: ctx.args.input.createdAt ?? timestamp,
    updatedAt: ctx.args.input.updatedAt ?? timestamp,
    __typename: "User",
    _sk: \`User#\${id}\`
  };
  return put({
    key: { id: values.id },
    item: values,
    condition: {
      id: {
        attributeExists: false
      }
    }
  });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLmNyZWF0ZVVzZXIudHMiXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxXQUFXO0FBS3BCLFNBQWlDLFlBQVk7QUFFdEMsU0FBUyxRQUNkLEtBQ3dCO0FBQ3hCLFFBQU0sS0FBSyxJQUFJLEtBQUssTUFBTSxNQUFNLEtBQUssT0FBTztBQUM1QyxRQUFNLFlBQVksS0FBSyxLQUFLLFdBQVc7QUFDdkMsUUFBTSxTQUFTO0FBQUEsSUFDYixHQUFHLElBQUksS0FBSztBQUFBLElBQ1o7QUFBQSxJQUNBLFdBQVcsSUFBSSxLQUFLLE1BQU0sYUFBYTtBQUFBLElBQ3ZDLFdBQVcsSUFBSSxLQUFLLE1BQU0sYUFBYTtBQUFBLElBQ3ZDLFlBQVk7QUFBQSxJQUNaLEtBQUssUUFBUSxFQUFFO0FBQUEsRUFDakI7QUFDQSxTQUFPLElBQUk7QUFBQSxJQUNULEtBQUssRUFBRSxJQUFJLE9BQU8sR0FBRztBQUFBLElBQ3JCLE1BQU07QUFBQSxJQUNOLFdBQVc7QUFBQSxNQUNULElBQUk7QUFBQSxRQUNGLGlCQUFpQjtBQUFBLE1BQ25CO0FBQUEsSUFDRjtBQUFBLEVBQ0YsQ0FBQztBQUNIO0FBQ08sU0FBUyxTQUFTLEtBQXlDO0FBQ2hFLE1BQUksSUFBSSxPQUFPO0FBQ2IsV0FBTyxLQUFLLE1BQU0sSUFBSSxNQUFNLFNBQVMsSUFBSSxNQUFNLElBQUk7QUFBQSxFQUNyRDtBQUNBLFNBQU8sSUFBSTtBQUNiOyIsCiAgIm5hbWVzIjogW10KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "createUser",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.updateUser.ts
import {
  operations,
  update
} from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  const input = {
    ...ctx.args.input,
    updatedAt: ctx.args.input.updatedAt ?? util.time.nowISO8601()
  };
  const values = {};
  for (const [key, value] of Object.entries(input)) {
    Object.assign(values, { [key]: operations.replace(value) });
  }
  return update({
    key: { id: values.id },
    update: values,
    condition: {
      id: {
        attributeExists: true
      }
    }
  });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLnVwZGF0ZVVzZXIudHMiXSwKICAibWFwcGluZ3MiOiAiO0FBQUE7QUFBQSxFQUNFO0FBQUEsRUFFQTtBQUFBLE9BQ0s7QUFLUCxTQUFvQyxZQUFZO0FBRXpDLFNBQVMsUUFDZCxLQUMyQjtBQUMzQixRQUFNLFFBQVE7QUFBQSxJQUNaLEdBQUcsSUFBSSxLQUFLO0FBQUEsSUFDWixXQUFXLElBQUksS0FBSyxNQUFNLGFBQWEsS0FBSyxLQUFLLFdBQVc7QUFBQSxFQUM5RDtBQUNBLFFBQU0sU0FBcUMsQ0FBQztBQUM1QyxhQUFXLENBQUMsS0FBSyxLQUFLLEtBQUssT0FBTyxRQUFRLEtBQUssR0FBRztBQUNoRCxXQUFPLE9BQU8sUUFBUSxFQUFFLENBQUMsR0FBRyxHQUFHLFdBQVcsUUFBUSxLQUFLLEVBQUUsQ0FBQztBQUFBLEVBQzVEO0FBQ0EsU0FBTyxPQUFPO0FBQUEsSUFDWixLQUFLLEVBQUUsSUFBSSxPQUFPLEdBQUc7QUFBQSxJQUNyQixRQUFRO0FBQUEsSUFDUixXQUFXO0FBQUEsTUFDVCxJQUFJO0FBQUEsUUFDRixpQkFBaUI7QUFBQSxNQUNuQjtBQUFBLElBQ0Y7QUFBQSxFQUNGLENBQUM7QUFDSDtBQUNPLFNBQVMsU0FBUyxLQUF5QztBQUNoRSxNQUFJLElBQUksT0FBTztBQUNiLFdBQU8sS0FBSyxNQUFNLElBQUksTUFBTSxTQUFTLElBQUksTUFBTSxJQUFJO0FBQUEsRUFDckQ7QUFDQSxTQUFPLElBQUk7QUFDYjsiLAogICJuYW1lcyI6IFtdCn0K
",
      "dataSource": "TestDataSource",
      "fieldName": "updateUser",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.deleteUser.ts
import { remove } from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  const id = ctx.args.id;
  return remove({
    key: { id },
    condition: {
      id: {
        attributeExists: true
      }
    }
  });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLmRlbGV0ZVVzZXIudHMiXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxjQUFjO0FBS3ZCLFNBQW9DLFlBQVk7QUFFekMsU0FBUyxRQUNkLEtBQzJCO0FBQzNCLFFBQU0sS0FBSyxJQUFJLEtBQUs7QUFDcEIsU0FBTyxPQUFPO0FBQUEsSUFDWixLQUFLLEVBQUUsR0FBTztBQUFBLElBQ2QsV0FBVztBQUFBLE1BQ1QsSUFBSTtBQUFBLFFBQ0YsaUJBQWlCO0FBQUEsTUFDbkI7QUFBQSxJQUNGO0FBQUEsRUFDRixDQUFDO0FBQ0g7QUFDTyxTQUFTLFNBQVMsS0FBeUM7QUFDaEUsTUFBSSxJQUFJLE9BQU87QUFDYixXQUFPLEtBQUssTUFBTSxJQUFJLE1BQU0sU0FBUyxJQUFJLE1BQU0sSUFBSTtBQUFBLEVBQ3JEO0FBQ0EsU0FBTyxJQUFJO0FBQ2I7IiwKICAibmFtZXMiOiBbXQp9Cg==
",
      "dataSource": "TestDataSource",
      "fieldName": "deleteUser",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.upsertTask.ts
import { util } from "@aws-appsync/utils";
function request(ctx) {
  return null;
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLnVwc2VydFRhc2sudHMiXSwKICAibWFwcGluZ3MiOiAiO0FBSUEsU0FBb0MsWUFBWTtBQUV6QyxTQUFTLFFBQ2QsS0FDMkI7QUFDM0IsU0FBTztBQUNUO0FBQ08sU0FBUyxTQUFTLEtBQXlDO0FBQ2hFLE1BQUksSUFBSSxPQUFPO0FBQ2IsV0FBTyxLQUFLLE1BQU0sSUFBSSxNQUFNLFNBQVMsSUFBSSxNQUFNLElBQUk7QUFBQSxFQUNyRDtBQUNBLFNBQU8sSUFBSTtBQUNiOyIsCiAgIm5hbWVzIjogW10KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "upsertTask",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.deleteTask.ts
import { remove } from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  const id = ctx.args.id;
  return remove({
    key: { id },
    condition: {
      id: {
        attributeExists: true
      }
    }
  });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLmRlbGV0ZVRhc2sudHMiXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxjQUFjO0FBS3ZCLFNBQW9DLFlBQVk7QUFFekMsU0FBUyxRQUNkLEtBQzJCO0FBQzNCLFFBQU0sS0FBSyxJQUFJLEtBQUs7QUFDcEIsU0FBTyxPQUFPO0FBQUEsSUFDWixLQUFLLEVBQUUsR0FBTztBQUFBLElBQ2QsV0FBVztBQUFBLE1BQ1QsSUFBSTtBQUFBLFFBQ0YsaUJBQWlCO0FBQUEsTUFDbkI7QUFBQSxJQUNGO0FBQUEsRUFDRixDQUFDO0FBQ0g7QUFDTyxTQUFTLFNBQVMsS0FBeUM7QUFDaEUsTUFBSSxJQUFJLE9BQU87QUFDYixXQUFPLEtBQUssTUFBTSxJQUFJLE1BQU0sU0FBUyxJQUFJLE1BQU0sSUFBSTtBQUFBLEVBQ3JEO0FBQ0EsU0FBTyxJQUFJO0FBQ2I7IiwKICAibmFtZXMiOiBbXQp9Cg==
",
      "dataSource": "TestDataSource",
      "fieldName": "deleteTask",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/LabelEdge.node.ts
import { runtime, util } from "@aws-appsync/utils";
import { get } from "@aws-appsync/utils/dynamodb";
function request(ctx) {
  if (ctx.source?.node) {
    return runtime.earlyReturn(ctx.source.node);
  }
  return get({ key: { id: ctx.source?.targetId } });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL0xhYmVsRWRnZS5ub2RlLnRzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsU0FBaUMsWUFBWTtBQUN0RCxTQUFTLFdBQVc7QUFNYixTQUFTLFFBQVEsS0FBc0Q7QUFDNUUsTUFBSSxJQUFJLFFBQVEsTUFBTTtBQUNwQixXQUFPLFFBQVEsWUFBWSxJQUFJLE9BQU8sSUFBSTtBQUFBLEVBQzVDO0FBQ0EsU0FBTyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksSUFBSSxRQUFRLFNBQVMsRUFBRSxDQUFDO0FBQ2xEO0FBQ08sU0FBUyxTQUFTLEtBQXFDO0FBQzVELE1BQUksSUFBSSxPQUFPO0FBQ2IsV0FBTyxLQUFLLE1BQU0sSUFBSSxNQUFNLFNBQVMsSUFBSSxNQUFNLElBQUk7QUFBQSxFQUNyRDtBQUNBLFNBQU8sSUFBSTtBQUNiOyIsCiAgIm5hbWVzIjogW10KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "node",
      "pipelineFunctions": undefined,
      "typeName": "LabelEdge",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.createLabelEdge.ts
import { put } from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  const id = \`\${ctx.args.input.sourceId}#\${ctx.args.input.targetId}\`;
  const timestamp = util.time.nowISO8601();
  const values = {
    ...ctx.args.input,
    id,
    createdAt: timestamp,
    updatedAt: timestamp,
    __typename: "LabelEdge",
    _sk: \`LabelEdge#\${id}\`
  };
  return put({
    key: { id: values.id },
    item: values,
    condition: {
      id: {
        attributeExists: false
      }
    }
  });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLmNyZWF0ZUxhYmVsRWRnZS50cyJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxTQUFTLFdBQVc7QUFLcEIsU0FBaUMsWUFBWTtBQUV0QyxTQUFTLFFBQ2QsS0FDd0I7QUFDeEIsUUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksS0FBSyxNQUFNLFFBQVE7QUFDaEUsUUFBTSxZQUFZLEtBQUssS0FBSyxXQUFXO0FBQ3ZDLFFBQU0sU0FBUztBQUFBLElBQ2IsR0FBRyxJQUFJLEtBQUs7QUFBQSxJQUNaO0FBQUEsSUFDQSxXQUFXO0FBQUEsSUFDWCxXQUFXO0FBQUEsSUFDWCxZQUFZO0FBQUEsSUFDWixLQUFLLGFBQWEsRUFBRTtBQUFBLEVBQ3RCO0FBQ0EsU0FBTyxJQUFJO0FBQUEsSUFDVCxLQUFLLEVBQUUsSUFBSSxPQUFPLEdBQUc7QUFBQSxJQUNyQixNQUFNO0FBQUEsSUFDTixXQUFXO0FBQUEsTUFDVCxJQUFJO0FBQUEsUUFDRixpQkFBaUI7QUFBQSxNQUNuQjtBQUFBLElBQ0Y7QUFBQSxFQUNGLENBQUM7QUFDSDtBQUNPLFNBQVMsU0FBUyxLQUFtRDtBQUMxRSxNQUFJLElBQUksT0FBTztBQUNiLFdBQU8sS0FBSyxNQUFNLElBQUksTUFBTSxTQUFTLElBQUksTUFBTSxJQUFJO0FBQUEsRUFDckQ7QUFDQSxTQUFPLElBQUk7QUFDYjsiLAogICJuYW1lcyI6IFtdCn0K
",
      "dataSource": "TestDataSource",
      "fieldName": "createLabelEdge",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.deleteLabelEdge.ts
import { remove } from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  const id = \`\${ctx.args.input.sourceId}#\${ctx.args.input.targetId}\`;
  return remove({
    key: { id },
    condition: {
      id: {
        attributeExists: true
      }
    }
  });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLmRlbGV0ZUxhYmVsRWRnZS50cyJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxTQUFTLGNBQWM7QUFLdkIsU0FBb0MsWUFBWTtBQUV6QyxTQUFTLFFBQ2QsS0FDMkI7QUFDM0IsUUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksS0FBSyxNQUFNLFFBQVE7QUFDaEUsU0FBTyxPQUFPO0FBQUEsSUFDWixLQUFLLEVBQUUsR0FBTztBQUFBLElBQ2QsV0FBVztBQUFBLE1BQ1QsSUFBSTtBQUFBLFFBQ0YsaUJBQWlCO0FBQUEsTUFDbkI7QUFBQSxJQUNGO0FBQUEsRUFDRixDQUFDO0FBQ0g7QUFDTyxTQUFTLFNBQVMsS0FBbUQ7QUFDMUUsTUFBSSxJQUFJLE9BQU87QUFDYixXQUFPLEtBQUssTUFBTSxJQUFJLE1BQU0sU0FBUyxJQUFJLE1BQU0sSUFBSTtBQUFBLEVBQ3JEO0FBQ0EsU0FBTyxJQUFJO0FBQ2I7IiwKICAibmFtZXMiOiBbXQp9Cg==
",
      "dataSource": "TestDataSource",
      "fieldName": "deleteLabelEdge",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Task.labels.ts
import { query } from "@aws-appsync/utils/dynamodb";
import { util as util2 } from "@aws-appsync/utils";

// packages/appsync-utils/dist/format.js
function formatConnection(props) {
  const { items, prevToken, nextToken, ...rest } = props;
  const edges = items.filter(Boolean).map((item) => ({
    cursor: util.base64Encode(item.id),
    node: item
  }));
  const pageInfo = {
    hasNextPage: Boolean(nextToken),
    hasPreviousPage: Boolean(prevToken),
    endCursor: nextToken || null,
    startCursor: prevToken || null
  };
  return { edges, pageInfo, ...rest };
}

// packages/graphql-transformer/__generated__/resolvers/Task.labels.ts
function request(ctx) {
  return query({
    query: {
      sourceId: ctx.source?.id,
      _sk: {
        beginsWith: "LabelEdge"
      }
    },
    filter: ctx.args.filter,
    limit: ctx.args.first ?? 100,
    nextToken: ctx.args.after ?? void 0,
    scanIndexForward: ctx.args.sort === "ASC",
    index: "bySourceId"
  });
}
function response(ctx) {
  if (ctx.error) {
    return util2.error(ctx.error.message, ctx.error.type);
  }
  const keys = ctx.result.items.map((edge) => ({ id: edge.targetId }));
  return formatConnection({
    items: [],
    keys,
    prevToken: ctx.args.after,
    nextToken: ctx.result.nextToken
  });
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1Rhc2subGFiZWxzLnRzIiwgIi4uLy4uL2FwcHN5bmMtdXRpbHMvZGlzdC9mb3JtYXQuanMiXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxhQUFhO0FBRXRCLFNBQStCLFFBQUFBLGFBQVk7OztBQ0ZwQyxTQUFTLGlCQUFpQixPQUFPO0FBQ3BDLFFBQU0sRUFBRSxPQUFPLFdBQVcsV0FBVyxHQUFHLEtBQUssSUFBSTtBQUNqRCxRQUFNLFFBQVEsTUFBTSxPQUFPLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVTtBQUFBLElBQy9DLFFBQVEsS0FBSyxhQUFhLEtBQUssRUFBRTtBQUFBLElBQ2pDLE1BQU07QUFBQSxFQUNWLEVBQUU7QUFDRixRQUFNLFdBQVc7QUFBQSxJQUNiLGFBQWEsUUFBUSxTQUFTO0FBQUEsSUFDOUIsaUJBQWlCLFFBQVEsU0FBUztBQUFBLElBQ2xDLFdBQVcsYUFBYTtBQUFBLElBQ3hCLGFBQWEsYUFBYTtBQUFBLEVBQzlCO0FBQ0EsU0FBTyxFQUFFLE9BQU8sVUFBVSxHQUFHLEtBQUs7QUFDdEM7OztBRFJPLFNBQVMsUUFBUSxLQUFpRDtBQUN2RSxTQUFPLE1BQU07QUFBQSxJQUNYLE9BQU87QUFBQSxNQUNMLFVBQVUsSUFBSSxRQUFRO0FBQUEsTUFDdEIsS0FBSztBQUFBLFFBQ0gsWUFBWTtBQUFBLE1BQ2Q7QUFBQSxJQUNGO0FBQUEsSUFDQSxRQUFRLElBQUksS0FBSztBQUFBLElBQ2pCLE9BQU8sSUFBSSxLQUFLLFNBQVM7QUFBQSxJQUN6QixXQUFXLElBQUksS0FBSyxTQUFTO0FBQUEsSUFDN0Isa0JBQWtCLElBQUksS0FBSyxTQUFTO0FBQUEsSUFDcEMsT0FBTztBQUFBLEVBQ1QsQ0FBQztBQUNIO0FBQ08sU0FBUyxTQUFTLEtBQTRDO0FBQ25FLE1BQUksSUFBSSxPQUFPO0FBQ2IsV0FBT0MsTUFBSyxNQUFNLElBQUksTUFBTSxTQUFTLElBQUksTUFBTSxJQUFJO0FBQUEsRUFDckQ7QUFDQSxRQUFNLE9BQU8sSUFBSSxPQUFPLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQ25FLFNBQU8saUJBQWlCO0FBQUEsSUFDdEIsT0FBTyxDQUFDO0FBQUEsSUFDUjtBQUFBLElBQ0EsV0FBVyxJQUFJLEtBQUs7QUFBQSxJQUNwQixXQUFXLElBQUksT0FBTztBQUFBLEVBQ3hCLENBQUM7QUFDSDsiLAogICJuYW1lcyI6IFsidXRpbCIsICJ1dGlsIl0KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "labels",
      "pipelineFunctions": undefined,
      "typeName": "Task",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/LabelConnection.edges.ts
import { runtime, util as util2 } from "@aws-appsync/utils";

// packages/appsync-utils/dist/format.js
function formatEdges(items) {
  const filtered = items.filter(Boolean);
  return filtered.map((item) => ({
    cursor: util.base64Encode(item?.id),
    node: item
  }));
}

// packages/graphql-transformer/__generated__/resolvers/LabelConnection.edges.ts
function request(ctx) {
  if (ctx.source?.edges && ctx.source.edges.length) {
    return runtime.earlyReturn(ctx.source.edges);
  }
  if (!ctx.source?.keys) {
    return util2.error("Missing operation keys", "InvalidOperationException");
  }
  return {
    operation: "BatchGetItem",
    tables: {
      ["TestTable"]: { keys: ctx.source?.keys }
    }
  };
}
function response(ctx) {
  if (ctx.error) {
    return util2.error(ctx.error.message, ctx.error.type);
  }
  return formatEdges(ctx.result.data["TestTable"]);
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL0xhYmVsQ29ubmVjdGlvbi5lZGdlcy50cyIsICIuLi8uLi9hcHBzeW5jLXV0aWxzL2Rpc3QvZm9ybWF0LmpzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsU0FBUyxRQUFBQSxhQUFZOzs7QUNjdkIsU0FBUyxZQUFZLE9BQU87QUFDL0IsUUFBTSxXQUFXLE1BQU0sT0FBTyxPQUFPO0FBQ3JDLFNBQU8sU0FBUyxJQUFJLENBQUMsVUFBVTtBQUFBLElBQzNCLFFBQVEsS0FBSyxhQUFhLE1BQU0sRUFBRTtBQUFBLElBQ2xDLE1BQU07QUFBQSxFQUNWLEVBQUU7QUFDTjs7O0FEWk8sU0FBUyxRQUNkLEtBQzZCO0FBQzdCLE1BQUksSUFBSSxRQUFRLFNBQVMsSUFBSSxPQUFPLE1BQU0sUUFBUTtBQUNoRCxXQUFPLFFBQVEsWUFBWSxJQUFJLE9BQU8sS0FBSztBQUFBLEVBQzdDO0FBQ0EsTUFBSSxDQUFDLElBQUksUUFBUSxNQUFNO0FBQ3JCLFdBQU9DLE1BQUssTUFBTSwwQkFBMEIsMkJBQTJCO0FBQUEsRUFDekU7QUFDQSxTQUFPO0FBQUEsSUFDTCxXQUFXO0FBQUEsSUFDWCxRQUFRO0FBQUEsTUFDTixDQUFDLFdBQVcsR0FBRyxFQUFFLE1BQU0sSUFBSSxRQUFRLEtBQUs7QUFBQSxJQUMxQztBQUFBLEVBQ0Y7QUFDRjtBQUNPLFNBQVMsU0FBUyxLQUFrRDtBQUN6RSxNQUFJLElBQUksT0FBTztBQUNiLFdBQU9BLE1BQUssTUFBTSxJQUFJLE1BQU0sU0FBUyxJQUFJLE1BQU0sSUFBSTtBQUFBLEVBQ3JEO0FBQ0EsU0FBTyxZQUFZLElBQUksT0FBTyxLQUFLLFdBQVcsQ0FBQztBQUNqRDsiLAogICJuYW1lcyI6IFsidXRpbCIsICJ1dGlsIl0KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "edges",
      "pipelineFunctions": undefined,
      "typeName": "LabelConnection",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Task.occurrences.ts
import { query } from "@aws-appsync/utils/dynamodb";
import { util as util2 } from "@aws-appsync/utils";

// packages/appsync-utils/dist/format.js
function formatConnection(props) {
  const { items, prevToken, nextToken, ...rest } = props;
  const edges = items.filter(Boolean).map((item) => ({
    cursor: util.base64Encode(item.id),
    node: item
  }));
  const pageInfo = {
    hasNextPage: Boolean(nextToken),
    hasPreviousPage: Boolean(prevToken),
    endCursor: nextToken || null,
    startCursor: prevToken || null
  };
  return { edges, pageInfo, ...rest };
}

// packages/graphql-transformer/__generated__/resolvers/Task.occurrences.ts
function request(ctx) {
  return query({
    query: { sourceId: ctx.source?.id },
    filter: ctx.args.filter,
    limit: ctx.args.first ?? 100,
    nextToken: ctx.args.after ?? void 0,
    scanIndexForward: ctx.args.sort === "ASC",
    index: "bySourceId"
  });
}
function response(ctx) {
  if (ctx.error) {
    return util2.error(ctx.error.message, ctx.error.type);
  }
  return formatConnection({
    items: ctx.result.items,
    prevToken: ctx.args.after,
    nextToken: ctx.result.nextToken
  });
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1Rhc2sub2NjdXJyZW5jZXMudHMiLCAiLi4vLi4vYXBwc3luYy11dGlscy9kaXN0L2Zvcm1hdC5qcyJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxTQUFTLGFBQWE7QUFLdEIsU0FBK0IsUUFBQUEsYUFBWTs7O0FDTHBDLFNBQVMsaUJBQWlCLE9BQU87QUFDcEMsUUFBTSxFQUFFLE9BQU8sV0FBVyxXQUFXLEdBQUcsS0FBSyxJQUFJO0FBQ2pELFFBQU0sUUFBUSxNQUFNLE9BQU8sT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQUEsSUFDL0MsUUFBUSxLQUFLLGFBQWEsS0FBSyxFQUFFO0FBQUEsSUFDakMsTUFBTTtBQUFBLEVBQ1YsRUFBRTtBQUNGLFFBQU0sV0FBVztBQUFBLElBQ2IsYUFBYSxRQUFRLFNBQVM7QUFBQSxJQUM5QixpQkFBaUIsUUFBUSxTQUFTO0FBQUEsSUFDbEMsV0FBVyxhQUFhO0FBQUEsSUFDeEIsYUFBYSxhQUFhO0FBQUEsRUFDOUI7QUFDQSxTQUFPLEVBQUUsT0FBTyxVQUFVLEdBQUcsS0FBSztBQUN0Qzs7O0FETE8sU0FBUyxRQUFRLEtBQXNEO0FBQzVFLFNBQU8sTUFBTTtBQUFBLElBQ1gsT0FBTyxFQUFFLFVBQVUsSUFBSSxRQUFRLEdBQUc7QUFBQSxJQUNsQyxRQUFRLElBQUksS0FBSztBQUFBLElBQ2pCLE9BQU8sSUFBSSxLQUFLLFNBQVM7QUFBQSxJQUN6QixXQUFXLElBQUksS0FBSyxTQUFTO0FBQUEsSUFDN0Isa0JBQWtCLElBQUksS0FBSyxTQUFTO0FBQUEsSUFDcEMsT0FBTztBQUFBLEVBQ1QsQ0FBQztBQUNIO0FBQ08sU0FBUyxTQUFTLEtBQWdEO0FBQ3ZFLE1BQUksSUFBSSxPQUFPO0FBQ2IsV0FBT0MsTUFBSyxNQUFNLElBQUksTUFBTSxTQUFTLElBQUksTUFBTSxJQUFJO0FBQUEsRUFDckQ7QUFDQSxTQUFPLGlCQUFpQjtBQUFBLElBQ3RCLE9BQU8sSUFBSSxPQUFPO0FBQUEsSUFDbEIsV0FBVyxJQUFJLEtBQUs7QUFBQSxJQUNwQixXQUFXLElBQUksT0FBTztBQUFBLEVBQ3hCLENBQUM7QUFDSDsiLAogICJuYW1lcyI6IFsidXRpbCIsICJ1dGlsIl0KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "occurrences",
      "pipelineFunctions": undefined,
      "typeName": "Task",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Task.subtasks.ts
import { query } from "@aws-appsync/utils/dynamodb";
import { util as util2 } from "@aws-appsync/utils";

// packages/appsync-utils/dist/format.js
function formatConnection(props) {
  const { items, prevToken, nextToken, ...rest } = props;
  const edges = items.filter(Boolean).map((item) => ({
    cursor: util.base64Encode(item.id),
    node: item
  }));
  const pageInfo = {
    hasNextPage: Boolean(nextToken),
    hasPreviousPage: Boolean(prevToken),
    endCursor: nextToken || null,
    startCursor: prevToken || null
  };
  return { edges, pageInfo, ...rest };
}

// packages/graphql-transformer/__generated__/resolvers/Task.subtasks.ts
function request(ctx) {
  return query({
    query: { sourceId: ctx.source?.id },
    filter: ctx.args.filter,
    limit: ctx.args.first ?? 100,
    nextToken: ctx.args.after ?? void 0,
    scanIndexForward: ctx.args.sort === "ASC",
    index: "bySourceId"
  });
}
function response(ctx) {
  if (ctx.error) {
    return util2.error(ctx.error.message, ctx.error.type);
  }
  return formatConnection({
    items: ctx.result.items,
    prevToken: ctx.args.after,
    nextToken: ctx.result.nextToken
  });
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1Rhc2suc3VidGFza3MudHMiLCAiLi4vLi4vYXBwc3luYy11dGlscy9kaXN0L2Zvcm1hdC5qcyJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxTQUFTLGFBQWE7QUFLdEIsU0FBK0IsUUFBQUEsYUFBWTs7O0FDTHBDLFNBQVMsaUJBQWlCLE9BQU87QUFDcEMsUUFBTSxFQUFFLE9BQU8sV0FBVyxXQUFXLEdBQUcsS0FBSyxJQUFJO0FBQ2pELFFBQU0sUUFBUSxNQUFNLE9BQU8sT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQUEsSUFDL0MsUUFBUSxLQUFLLGFBQWEsS0FBSyxFQUFFO0FBQUEsSUFDakMsTUFBTTtBQUFBLEVBQ1YsRUFBRTtBQUNGLFFBQU0sV0FBVztBQUFBLElBQ2IsYUFBYSxRQUFRLFNBQVM7QUFBQSxJQUM5QixpQkFBaUIsUUFBUSxTQUFTO0FBQUEsSUFDbEMsV0FBVyxhQUFhO0FBQUEsSUFDeEIsYUFBYSxhQUFhO0FBQUEsRUFDOUI7QUFDQSxTQUFPLEVBQUUsT0FBTyxVQUFVLEdBQUcsS0FBSztBQUN0Qzs7O0FETE8sU0FBUyxRQUFRLEtBQW1EO0FBQ3pFLFNBQU8sTUFBTTtBQUFBLElBQ1gsT0FBTyxFQUFFLFVBQVUsSUFBSSxRQUFRLEdBQUc7QUFBQSxJQUNsQyxRQUFRLElBQUksS0FBSztBQUFBLElBQ2pCLE9BQU8sSUFBSSxLQUFLLFNBQVM7QUFBQSxJQUN6QixXQUFXLElBQUksS0FBSyxTQUFTO0FBQUEsSUFDN0Isa0JBQWtCLElBQUksS0FBSyxTQUFTO0FBQUEsSUFDcEMsT0FBTztBQUFBLEVBQ1QsQ0FBQztBQUNIO0FBQ08sU0FBUyxTQUFTLEtBQTZDO0FBQ3BFLE1BQUksSUFBSSxPQUFPO0FBQ2IsV0FBT0MsTUFBSyxNQUFNLElBQUksTUFBTSxTQUFTLElBQUksTUFBTSxJQUFJO0FBQUEsRUFDckQ7QUFDQSxTQUFPLGlCQUFpQjtBQUFBLElBQ3RCLE9BQU8sSUFBSSxPQUFPO0FBQUEsSUFDbEIsV0FBVyxJQUFJLEtBQUs7QUFBQSxJQUNwQixXQUFXLElBQUksT0FBTztBQUFBLEVBQ3hCLENBQUM7QUFDSDsiLAogICJuYW1lcyI6IFsidXRpbCIsICJ1dGlsIl0KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "subtasks",
      "pipelineFunctions": undefined,
      "typeName": "Task",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/ArtifactEdge.node.ts
import { runtime, util } from "@aws-appsync/utils";
import { get } from "@aws-appsync/utils/dynamodb";
function request(ctx) {
  if (ctx.source?.node) {
    return runtime.earlyReturn(ctx.source.node);
  }
  return get({ key: { id: ctx.source?.targetId } });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL0FydGlmYWN0RWRnZS5ub2RlLnRzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsU0FBaUMsWUFBWTtBQUN0RCxTQUFTLFdBQVc7QUFNYixTQUFTLFFBQ2QsS0FDd0I7QUFDeEIsTUFBSSxJQUFJLFFBQVEsTUFBTTtBQUNwQixXQUFPLFFBQVEsWUFBWSxJQUFJLE9BQU8sSUFBSTtBQUFBLEVBQzVDO0FBQ0EsU0FBTyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksSUFBSSxRQUFRLFNBQVMsRUFBRSxDQUFDO0FBQ2xEO0FBQ08sU0FBUyxTQUFTLEtBQTJDO0FBQ2xFLE1BQUksSUFBSSxPQUFPO0FBQ2IsV0FBTyxLQUFLLE1BQU0sSUFBSSxNQUFNLFNBQVMsSUFBSSxNQUFNLElBQUk7QUFBQSxFQUNyRDtBQUNBLFNBQU8sSUFBSTtBQUNiOyIsCiAgIm5hbWVzIjogW10KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "node",
      "pipelineFunctions": undefined,
      "typeName": "ArtifactEdge",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.createArtifactEdge.ts
import { put } from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  const id = \`\${ctx.args.input.sourceId}#\${ctx.args.input.targetId}\`;
  const timestamp = util.time.nowISO8601();
  const values = {
    ...ctx.args.input,
    id,
    createdAt: timestamp,
    updatedAt: timestamp,
    __typename: "ArtifactEdge",
    _sk: \`ArtifactEdge#\${id}\`
  };
  return put({
    key: { id: values.id },
    item: values,
    condition: {
      id: {
        attributeExists: false
      }
    }
  });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLmNyZWF0ZUFydGlmYWN0RWRnZS50cyJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxTQUFTLFdBQVc7QUFLcEIsU0FBaUMsWUFBWTtBQUV0QyxTQUFTLFFBQ2QsS0FDd0I7QUFDeEIsUUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksS0FBSyxNQUFNLFFBQVE7QUFDaEUsUUFBTSxZQUFZLEtBQUssS0FBSyxXQUFXO0FBQ3ZDLFFBQU0sU0FBUztBQUFBLElBQ2IsR0FBRyxJQUFJLEtBQUs7QUFBQSxJQUNaO0FBQUEsSUFDQSxXQUFXO0FBQUEsSUFDWCxXQUFXO0FBQUEsSUFDWCxZQUFZO0FBQUEsSUFDWixLQUFLLGdCQUFnQixFQUFFO0FBQUEsRUFDekI7QUFDQSxTQUFPLElBQUk7QUFBQSxJQUNULEtBQUssRUFBRSxJQUFJLE9BQU8sR0FBRztBQUFBLElBQ3JCLE1BQU07QUFBQSxJQUNOLFdBQVc7QUFBQSxNQUNULElBQUk7QUFBQSxRQUNGLGlCQUFpQjtBQUFBLE1BQ25CO0FBQUEsSUFDRjtBQUFBLEVBQ0YsQ0FBQztBQUNIO0FBQ08sU0FBUyxTQUNkLEtBQ2M7QUFDZCxNQUFJLElBQUksT0FBTztBQUNiLFdBQU8sS0FBSyxNQUFNLElBQUksTUFBTSxTQUFTLElBQUksTUFBTSxJQUFJO0FBQUEsRUFDckQ7QUFDQSxTQUFPLElBQUk7QUFDYjsiLAogICJuYW1lcyI6IFtdCn0K
",
      "dataSource": "TestDataSource",
      "fieldName": "createArtifactEdge",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.deleteArtifactEdge.ts
import { remove } from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  const id = \`\${ctx.args.input.sourceId}#\${ctx.args.input.targetId}\`;
  return remove({
    key: { id },
    condition: {
      id: {
        attributeExists: true
      }
    }
  });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLmRlbGV0ZUFydGlmYWN0RWRnZS50cyJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxTQUFTLGNBQWM7QUFLdkIsU0FBb0MsWUFBWTtBQUV6QyxTQUFTLFFBQ2QsS0FDMkI7QUFDM0IsUUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksS0FBSyxNQUFNLFFBQVE7QUFDaEUsU0FBTyxPQUFPO0FBQUEsSUFDWixLQUFLLEVBQUUsR0FBTztBQUFBLElBQ2QsV0FBVztBQUFBLE1BQ1QsSUFBSTtBQUFBLFFBQ0YsaUJBQWlCO0FBQUEsTUFDbkI7QUFBQSxJQUNGO0FBQUEsRUFDRixDQUFDO0FBQ0g7QUFDTyxTQUFTLFNBQ2QsS0FDYztBQUNkLE1BQUksSUFBSSxPQUFPO0FBQ2IsV0FBTyxLQUFLLE1BQU0sSUFBSSxNQUFNLFNBQVMsSUFBSSxNQUFNLElBQUk7QUFBQSxFQUNyRDtBQUNBLFNBQU8sSUFBSTtBQUNiOyIsCiAgIm5hbWVzIjogW10KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "deleteArtifactEdge",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Task.artifacts.ts
import { query } from "@aws-appsync/utils/dynamodb";
import { util as util2 } from "@aws-appsync/utils";

// packages/appsync-utils/dist/format.js
function formatConnection(props) {
  const { items, prevToken, nextToken, ...rest } = props;
  const edges = items.filter(Boolean).map((item) => ({
    cursor: util.base64Encode(item.id),
    node: item
  }));
  const pageInfo = {
    hasNextPage: Boolean(nextToken),
    hasPreviousPage: Boolean(prevToken),
    endCursor: nextToken || null,
    startCursor: prevToken || null
  };
  return { edges, pageInfo, ...rest };
}

// packages/graphql-transformer/__generated__/resolvers/Task.artifacts.ts
function request(ctx) {
  return query({
    query: {
      sourceId: ctx.source?.id,
      _sk: {
        beginsWith: "ArtifactEdge"
      }
    },
    filter: ctx.args.filter,
    limit: ctx.args.first ?? 100,
    nextToken: ctx.args.after ?? void 0,
    scanIndexForward: ctx.args.sort === "ASC",
    index: "bySourceId"
  });
}
function response(ctx) {
  if (ctx.error) {
    return util2.error(ctx.error.message, ctx.error.type);
  }
  const keys = ctx.result.items.map((edge) => ({ id: edge.targetId }));
  return formatConnection({
    items: [],
    keys,
    prevToken: ctx.args.after,
    nextToken: ctx.result.nextToken
  });
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1Rhc2suYXJ0aWZhY3RzLnRzIiwgIi4uLy4uL2FwcHN5bmMtdXRpbHMvZGlzdC9mb3JtYXQuanMiXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxhQUFhO0FBS3RCLFNBQStCLFFBQUFBLGFBQVk7OztBQ0xwQyxTQUFTLGlCQUFpQixPQUFPO0FBQ3BDLFFBQU0sRUFBRSxPQUFPLFdBQVcsV0FBVyxHQUFHLEtBQUssSUFBSTtBQUNqRCxRQUFNLFFBQVEsTUFBTSxPQUFPLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVTtBQUFBLElBQy9DLFFBQVEsS0FBSyxhQUFhLEtBQUssRUFBRTtBQUFBLElBQ2pDLE1BQU07QUFBQSxFQUNWLEVBQUU7QUFDRixRQUFNLFdBQVc7QUFBQSxJQUNiLGFBQWEsUUFBUSxTQUFTO0FBQUEsSUFDOUIsaUJBQWlCLFFBQVEsU0FBUztBQUFBLElBQ2xDLFdBQVcsYUFBYTtBQUFBLElBQ3hCLGFBQWEsYUFBYTtBQUFBLEVBQzlCO0FBQ0EsU0FBTyxFQUFFLE9BQU8sVUFBVSxHQUFHLEtBQUs7QUFDdEM7OztBRExPLFNBQVMsUUFBUSxLQUFvRDtBQUMxRSxTQUFPLE1BQU07QUFBQSxJQUNYLE9BQU87QUFBQSxNQUNMLFVBQVUsSUFBSSxRQUFRO0FBQUEsTUFDdEIsS0FBSztBQUFBLFFBQ0gsWUFBWTtBQUFBLE1BQ2Q7QUFBQSxJQUNGO0FBQUEsSUFDQSxRQUFRLElBQUksS0FBSztBQUFBLElBQ2pCLE9BQU8sSUFBSSxLQUFLLFNBQVM7QUFBQSxJQUN6QixXQUFXLElBQUksS0FBSyxTQUFTO0FBQUEsSUFDN0Isa0JBQWtCLElBQUksS0FBSyxTQUFTO0FBQUEsSUFDcEMsT0FBTztBQUFBLEVBQ1QsQ0FBQztBQUNIO0FBQ08sU0FBUyxTQUFTLEtBQWtEO0FBQ3pFLE1BQUksSUFBSSxPQUFPO0FBQ2IsV0FBT0MsTUFBSyxNQUFNLElBQUksTUFBTSxTQUFTLElBQUksTUFBTSxJQUFJO0FBQUEsRUFDckQ7QUFDQSxRQUFNLE9BQU8sSUFBSSxPQUFPLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQ25FLFNBQU8saUJBQWlCO0FBQUEsSUFDdEIsT0FBTyxDQUFDO0FBQUEsSUFDUjtBQUFBLElBQ0EsV0FBVyxJQUFJLEtBQUs7QUFBQSxJQUNwQixXQUFXLElBQUksT0FBTztBQUFBLEVBQ3hCLENBQUM7QUFDSDsiLAogICJuYW1lcyI6IFsidXRpbCIsICJ1dGlsIl0KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "artifacts",
      "pipelineFunctions": undefined,
      "typeName": "Task",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/ArtifactConnection.edges.ts
import { runtime, util as util2 } from "@aws-appsync/utils";

// packages/appsync-utils/dist/format.js
function formatEdges(items) {
  const filtered = items.filter(Boolean);
  return filtered.map((item) => ({
    cursor: util.base64Encode(item?.id),
    node: item
  }));
}

// packages/graphql-transformer/__generated__/resolvers/ArtifactConnection.edges.ts
function request(ctx) {
  if (ctx.source?.edges && ctx.source.edges.length) {
    return runtime.earlyReturn(ctx.source.edges);
  }
  if (!ctx.source?.keys) {
    return util2.error("Missing operation keys", "InvalidOperationException");
  }
  return {
    operation: "BatchGetItem",
    tables: {
      ["TestTable"]: { keys: ctx.source?.keys }
    }
  };
}
function response(ctx) {
  if (ctx.error) {
    return util2.error(ctx.error.message, ctx.error.type);
  }
  return formatEdges(ctx.result.data["TestTable"]);
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL0FydGlmYWN0Q29ubmVjdGlvbi5lZGdlcy50cyIsICIuLi8uLi9hcHBzeW5jLXV0aWxzL2Rpc3QvZm9ybWF0LmpzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsU0FBUyxRQUFBQSxhQUFZOzs7QUNjdkIsU0FBUyxZQUFZLE9BQU87QUFDL0IsUUFBTSxXQUFXLE1BQU0sT0FBTyxPQUFPO0FBQ3JDLFNBQU8sU0FBUyxJQUFJLENBQUMsVUFBVTtBQUFBLElBQzNCLFFBQVEsS0FBSyxhQUFhLE1BQU0sRUFBRTtBQUFBLElBQ2xDLE1BQU07QUFBQSxFQUNWLEVBQUU7QUFDTjs7O0FEWk8sU0FBUyxRQUNkLEtBQzZCO0FBQzdCLE1BQUksSUFBSSxRQUFRLFNBQVMsSUFBSSxPQUFPLE1BQU0sUUFBUTtBQUNoRCxXQUFPLFFBQVEsWUFBWSxJQUFJLE9BQU8sS0FBSztBQUFBLEVBQzdDO0FBQ0EsTUFBSSxDQUFDLElBQUksUUFBUSxNQUFNO0FBQ3JCLFdBQU9DLE1BQUssTUFBTSwwQkFBMEIsMkJBQTJCO0FBQUEsRUFDekU7QUFDQSxTQUFPO0FBQUEsSUFDTCxXQUFXO0FBQUEsSUFDWCxRQUFRO0FBQUEsTUFDTixDQUFDLFdBQVcsR0FBRyxFQUFFLE1BQU0sSUFBSSxRQUFRLEtBQUs7QUFBQSxJQUMxQztBQUFBLEVBQ0Y7QUFDRjtBQUNPLFNBQVMsU0FDZCxLQUNnQjtBQUNoQixNQUFJLElBQUksT0FBTztBQUNiLFdBQU9BLE1BQUssTUFBTSxJQUFJLE1BQU0sU0FBUyxJQUFJLE1BQU0sSUFBSTtBQUFBLEVBQ3JEO0FBQ0EsU0FBTyxZQUFZLElBQUksT0FBTyxLQUFLLFdBQVcsQ0FBQztBQUNqRDsiLAogICJuYW1lcyI6IFsidXRpbCIsICJ1dGlsIl0KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "edges",
      "pipelineFunctions": undefined,
      "typeName": "ArtifactConnection",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.upsertLabel.ts
import { util } from "@aws-appsync/utils";
function request(ctx) {
  return null;
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLnVwc2VydExhYmVsLnRzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUlBLFNBQW9DLFlBQVk7QUFFekMsU0FBUyxRQUNkLEtBQzJCO0FBQzNCLFNBQU87QUFDVDtBQUNPLFNBQVMsU0FBUyxLQUEyQztBQUNsRSxNQUFJLElBQUksT0FBTztBQUNiLFdBQU8sS0FBSyxNQUFNLElBQUksTUFBTSxTQUFTLElBQUksTUFBTSxJQUFJO0FBQUEsRUFDckQ7QUFDQSxTQUFPLElBQUk7QUFDYjsiLAogICJuYW1lcyI6IFtdCn0K
",
      "dataSource": "TestDataSource",
      "fieldName": "upsertLabel",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.deleteLabel.ts
import { remove } from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  const id = ctx.args.id;
  return remove({
    key: { id },
    condition: {
      id: {
        attributeExists: true
      }
    }
  });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLmRlbGV0ZUxhYmVsLnRzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsY0FBYztBQUt2QixTQUFvQyxZQUFZO0FBRXpDLFNBQVMsUUFDZCxLQUMyQjtBQUMzQixRQUFNLEtBQUssSUFBSSxLQUFLO0FBQ3BCLFNBQU8sT0FBTztBQUFBLElBQ1osS0FBSyxFQUFFLEdBQU87QUFBQSxJQUNkLFdBQVc7QUFBQSxNQUNULElBQUk7QUFBQSxRQUNGLGlCQUFpQjtBQUFBLE1BQ25CO0FBQUEsSUFDRjtBQUFBLEVBQ0YsQ0FBQztBQUNIO0FBQ08sU0FBUyxTQUFTLEtBQTJDO0FBQ2xFLE1BQUksSUFBSSxPQUFPO0FBQ2IsV0FBTyxLQUFLLE1BQU0sSUFBSSxNQUFNLFNBQVMsSUFBSSxNQUFNLElBQUk7QUFBQSxFQUNyRDtBQUNBLFNBQU8sSUFBSTtBQUNiOyIsCiAgIm5hbWVzIjogW10KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "deleteLabel",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.upsertFile.ts
import { util } from "@aws-appsync/utils";
function request(ctx) {
  return null;
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLnVwc2VydEZpbGUudHMiXSwKICAibWFwcGluZ3MiOiAiO0FBSUEsU0FBb0MsWUFBWTtBQUV6QyxTQUFTLFFBQ2QsS0FDMkI7QUFDM0IsU0FBTztBQUNUO0FBQ08sU0FBUyxTQUFTLEtBQXlDO0FBQ2hFLE1BQUksSUFBSSxPQUFPO0FBQ2IsV0FBTyxLQUFLLE1BQU0sSUFBSSxNQUFNLFNBQVMsSUFBSSxNQUFNLElBQUk7QUFBQSxFQUNyRDtBQUNBLFNBQU8sSUFBSTtBQUNiOyIsCiAgIm5hbWVzIjogW10KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "upsertFile",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.deleteFile.ts
import { remove } from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  const id = ctx.args.id;
  return remove({
    key: { id },
    condition: {
      id: {
        attributeExists: true
      }
    }
  });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLmRlbGV0ZUZpbGUudHMiXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxjQUFjO0FBS3ZCLFNBQW9DLFlBQVk7QUFFekMsU0FBUyxRQUNkLEtBQzJCO0FBQzNCLFFBQU0sS0FBSyxJQUFJLEtBQUs7QUFDcEIsU0FBTyxPQUFPO0FBQUEsSUFDWixLQUFLLEVBQUUsR0FBTztBQUFBLElBQ2QsV0FBVztBQUFBLE1BQ1QsSUFBSTtBQUFBLFFBQ0YsaUJBQWlCO0FBQUEsTUFDbkI7QUFBQSxJQUNGO0FBQUEsRUFDRixDQUFDO0FBQ0g7QUFDTyxTQUFTLFNBQVMsS0FBeUM7QUFDaEUsTUFBSSxJQUFJLE9BQU87QUFDYixXQUFPLEtBQUssTUFBTSxJQUFJLE1BQU0sU0FBUyxJQUFJLE1BQU0sSUFBSTtBQUFBLEVBQ3JEO0FBQ0EsU0FBTyxJQUFJO0FBQ2I7IiwKICAibmFtZXMiOiBbXQp9Cg==
",
      "dataSource": "TestDataSource",
      "fieldName": "deleteFile",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.upsertTimeTracker.ts
import { util } from "@aws-appsync/utils";
function request(ctx) {
  return null;
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLnVwc2VydFRpbWVUcmFja2VyLnRzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUlBLFNBQW9DLFlBQVk7QUFFekMsU0FBUyxRQUNkLEtBQzJCO0FBQzNCLFNBQU87QUFDVDtBQUNPLFNBQVMsU0FDZCxLQUNhO0FBQ2IsTUFBSSxJQUFJLE9BQU87QUFDYixXQUFPLEtBQUssTUFBTSxJQUFJLE1BQU0sU0FBUyxJQUFJLE1BQU0sSUFBSTtBQUFBLEVBQ3JEO0FBQ0EsU0FBTyxJQUFJO0FBQ2I7IiwKICAibmFtZXMiOiBbXQp9Cg==
",
      "dataSource": "TestDataSource",
      "fieldName": "upsertTimeTracker",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Mutation.deleteTimeTracker.ts
import { remove } from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  const id = ctx.args.id;
  return remove({
    key: { id },
    condition: {
      id: {
        attributeExists: true
      }
    }
  });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL011dGF0aW9uLmRlbGV0ZVRpbWVUcmFja2VyLnRzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsY0FBYztBQUt2QixTQUFvQyxZQUFZO0FBRXpDLFNBQVMsUUFDZCxLQUMyQjtBQUMzQixRQUFNLEtBQUssSUFBSSxLQUFLO0FBQ3BCLFNBQU8sT0FBTztBQUFBLElBQ1osS0FBSyxFQUFFLEdBQU87QUFBQSxJQUNkLFdBQVc7QUFBQSxNQUNULElBQUk7QUFBQSxRQUNGLGlCQUFpQjtBQUFBLE1BQ25CO0FBQUEsSUFDRjtBQUFBLEVBQ0YsQ0FBQztBQUNIO0FBQ08sU0FBUyxTQUNkLEtBQ2E7QUFDYixNQUFJLElBQUksT0FBTztBQUNiLFdBQU8sS0FBSyxNQUFNLElBQUksTUFBTSxTQUFTLElBQUksTUFBTSxJQUFJO0FBQUEsRUFDckQ7QUFDQSxTQUFPLElBQUk7QUFDYjsiLAogICJuYW1lcyI6IFtdCn0K
",
      "dataSource": "TestDataSource",
      "fieldName": "deleteTimeTracker",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Viewer.user.ts
import { get } from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  return get({ key: { id: ctx.identity.sub } });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1ZpZXdlci51c2VyLnRzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsV0FBVztBQUVwQixTQUFpQyxZQUFZO0FBRXRDLFNBQVMsUUFBUSxLQUFtRDtBQUN6RSxTQUFPLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxJQUFJLFNBQVMsSUFBSSxFQUFFLENBQUM7QUFDOUM7QUFDTyxTQUFTLFNBQVMsS0FBaUM7QUFDeEQsTUFBSSxJQUFJLE9BQU87QUFDYixXQUFPLEtBQUssTUFBTSxJQUFJLE1BQU0sU0FBUyxJQUFJLE1BQU0sSUFBSTtBQUFBLEVBQ3JEO0FBQ0EsU0FBTyxJQUFJO0FBQ2I7IiwKICAibmFtZXMiOiBbXQp9Cg==
",
      "dataSource": "TestDataSource",
      "fieldName": "user",
      "pipelineFunctions": undefined,
      "typeName": "Viewer",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Viewer.tasks.ts
import { query } from "@aws-appsync/utils/dynamodb";
import { util as util2 } from "@aws-appsync/utils";

// packages/appsync-utils/dist/format.js
function formatConnection(props) {
  const { items, prevToken, nextToken, ...rest } = props;
  const edges = items.filter(Boolean).map((item) => ({
    cursor: util.base64Encode(item.id),
    node: item
  }));
  const pageInfo = {
    hasNextPage: Boolean(nextToken),
    hasPreviousPage: Boolean(prevToken),
    endCursor: nextToken || null,
    startCursor: prevToken || null
  };
  return { edges, pageInfo, ...rest };
}

// packages/graphql-transformer/__generated__/resolvers/Viewer.tasks.ts
function request(ctx) {
  return query({
    query: { sourceId: ctx.identity.sub },
    filter: ctx.args.filter,
    limit: ctx.args.first ?? 100,
    nextToken: ctx.args.after ?? void 0,
    scanIndexForward: ctx.args.sort === "ASC",
    index: "bySourceId"
  });
}
function response(ctx) {
  if (ctx.error) {
    return util2.error(ctx.error.message, ctx.error.type);
  }
  return formatConnection({
    items: ctx.result.items,
    prevToken: ctx.args.after,
    nextToken: ctx.result.nextToken
  });
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1ZpZXdlci50YXNrcy50cyIsICIuLi8uLi9hcHBzeW5jLXV0aWxzL2Rpc3QvZm9ybWF0LmpzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsYUFBYTtBQUt0QixTQUErQixRQUFBQSxhQUFZOzs7QUNMcEMsU0FBUyxpQkFBaUIsT0FBTztBQUNwQyxRQUFNLEVBQUUsT0FBTyxXQUFXLFdBQVcsR0FBRyxLQUFLLElBQUk7QUFDakQsUUFBTSxRQUFRLE1BQU0sT0FBTyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVU7QUFBQSxJQUMvQyxRQUFRLEtBQUssYUFBYSxLQUFLLEVBQUU7QUFBQSxJQUNqQyxNQUFNO0FBQUEsRUFDVixFQUFFO0FBQ0YsUUFBTSxXQUFXO0FBQUEsSUFDYixhQUFhLFFBQVEsU0FBUztBQUFBLElBQzlCLGlCQUFpQixRQUFRLFNBQVM7QUFBQSxJQUNsQyxXQUFXLGFBQWE7QUFBQSxJQUN4QixhQUFhLGFBQWE7QUFBQSxFQUM5QjtBQUNBLFNBQU8sRUFBRSxPQUFPLFVBQVUsR0FBRyxLQUFLO0FBQ3RDOzs7QURMTyxTQUFTLFFBQVEsS0FBa0Q7QUFDeEUsU0FBTyxNQUFNO0FBQUEsSUFDWCxPQUFPLEVBQUUsVUFBVSxJQUFJLFNBQVMsSUFBSTtBQUFBLElBQ3BDLFFBQVEsSUFBSSxLQUFLO0FBQUEsSUFDakIsT0FBTyxJQUFJLEtBQUssU0FBUztBQUFBLElBQ3pCLFdBQVcsSUFBSSxLQUFLLFNBQVM7QUFBQSxJQUM3QixrQkFBa0IsSUFBSSxLQUFLLFNBQVM7QUFBQSxJQUNwQyxPQUFPO0FBQUEsRUFDVCxDQUFDO0FBQ0g7QUFDTyxTQUFTLFNBQVMsS0FBNEM7QUFDbkUsTUFBSSxJQUFJLE9BQU87QUFDYixXQUFPQyxNQUFLLE1BQU0sSUFBSSxNQUFNLFNBQVMsSUFBSSxNQUFNLElBQUk7QUFBQSxFQUNyRDtBQUNBLFNBQU8saUJBQWlCO0FBQUEsSUFDdEIsT0FBTyxJQUFJLE9BQU87QUFBQSxJQUNsQixXQUFXLElBQUksS0FBSztBQUFBLElBQ3BCLFdBQVcsSUFBSSxPQUFPO0FBQUEsRUFDeEIsQ0FBQztBQUNIOyIsCiAgIm5hbWVzIjogWyJ1dGlsIiwgInV0aWwiXQp9Cg==
",
      "dataSource": "TestDataSource",
      "fieldName": "tasks",
      "pipelineFunctions": undefined,
      "typeName": "Viewer",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Viewer.labels.ts
import { query } from "@aws-appsync/utils/dynamodb";
import { util as util2 } from "@aws-appsync/utils";

// packages/appsync-utils/dist/format.js
function formatConnection(props) {
  const { items, prevToken, nextToken, ...rest } = props;
  const edges = items.filter(Boolean).map((item) => ({
    cursor: util.base64Encode(item.id),
    node: item
  }));
  const pageInfo = {
    hasNextPage: Boolean(nextToken),
    hasPreviousPage: Boolean(prevToken),
    endCursor: nextToken || null,
    startCursor: prevToken || null
  };
  return { edges, pageInfo, ...rest };
}

// packages/graphql-transformer/__generated__/resolvers/Viewer.labels.ts
function request(ctx) {
  return query({
    query: { sourceId: ctx.identity.sub },
    filter: ctx.args.filter,
    limit: ctx.args.first ?? 100,
    nextToken: ctx.args.after ?? void 0,
    scanIndexForward: ctx.args.sort === "ASC",
    index: "bySourceId"
  });
}
function response(ctx) {
  if (ctx.error) {
    return util2.error(ctx.error.message, ctx.error.type);
  }
  return formatConnection({
    items: ctx.result.items,
    prevToken: ctx.args.after,
    nextToken: ctx.result.nextToken
  });
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1ZpZXdlci5sYWJlbHMudHMiLCAiLi4vLi4vYXBwc3luYy11dGlscy9kaXN0L2Zvcm1hdC5qcyJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxTQUFTLGFBQWE7QUFLdEIsU0FBK0IsUUFBQUEsYUFBWTs7O0FDTHBDLFNBQVMsaUJBQWlCLE9BQU87QUFDcEMsUUFBTSxFQUFFLE9BQU8sV0FBVyxXQUFXLEdBQUcsS0FBSyxJQUFJO0FBQ2pELFFBQU0sUUFBUSxNQUFNLE9BQU8sT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVO0FBQUEsSUFDL0MsUUFBUSxLQUFLLGFBQWEsS0FBSyxFQUFFO0FBQUEsSUFDakMsTUFBTTtBQUFBLEVBQ1YsRUFBRTtBQUNGLFFBQU0sV0FBVztBQUFBLElBQ2IsYUFBYSxRQUFRLFNBQVM7QUFBQSxJQUM5QixpQkFBaUIsUUFBUSxTQUFTO0FBQUEsSUFDbEMsV0FBVyxhQUFhO0FBQUEsSUFDeEIsYUFBYSxhQUFhO0FBQUEsRUFDOUI7QUFDQSxTQUFPLEVBQUUsT0FBTyxVQUFVLEdBQUcsS0FBSztBQUN0Qzs7O0FETE8sU0FBUyxRQUFRLEtBQW1EO0FBQ3pFLFNBQU8sTUFBTTtBQUFBLElBQ1gsT0FBTyxFQUFFLFVBQVUsSUFBSSxTQUFTLElBQUk7QUFBQSxJQUNwQyxRQUFRLElBQUksS0FBSztBQUFBLElBQ2pCLE9BQU8sSUFBSSxLQUFLLFNBQVM7QUFBQSxJQUN6QixXQUFXLElBQUksS0FBSyxTQUFTO0FBQUEsSUFDN0Isa0JBQWtCLElBQUksS0FBSyxTQUFTO0FBQUEsSUFDcEMsT0FBTztBQUFBLEVBQ1QsQ0FBQztBQUNIO0FBQ08sU0FBUyxTQUFTLEtBQThDO0FBQ3JFLE1BQUksSUFBSSxPQUFPO0FBQ2IsV0FBT0MsTUFBSyxNQUFNLElBQUksTUFBTSxTQUFTLElBQUksTUFBTSxJQUFJO0FBQUEsRUFDckQ7QUFDQSxTQUFPLGlCQUFpQjtBQUFBLElBQ3RCLE9BQU8sSUFBSSxPQUFPO0FBQUEsSUFDbEIsV0FBVyxJQUFJLEtBQUs7QUFBQSxJQUNwQixXQUFXLElBQUksT0FBTztBQUFBLEVBQ3hCLENBQUM7QUFDSDsiLAogICJuYW1lcyI6IFsidXRpbCIsICJ1dGlsIl0KfQo=
",
      "dataSource": "TestDataSource",
      "fieldName": "labels",
      "pipelineFunctions": undefined,
      "typeName": "Viewer",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Query.node.ts
import { get } from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  return get({ key: { id: ctx.args.id } });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1F1ZXJ5Lm5vZGUudHMiXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxXQUFXO0FBRXBCLFNBQWlDLFlBQVk7QUFFdEMsU0FBUyxRQUFRLEtBQWtEO0FBQ3hFLFNBQU8sSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUN6QztBQUNPLFNBQVMsU0FBUyxLQUFnQztBQUN2RCxNQUFJLElBQUksT0FBTztBQUNiLFdBQU8sS0FBSyxNQUFNLElBQUksTUFBTSxTQUFTLElBQUksTUFBTSxJQUFJO0FBQUEsRUFDckQ7QUFDQSxTQUFPLElBQUk7QUFDYjsiLAogICJuYW1lcyI6IFtdCn0K
",
      "dataSource": "TestDataSource",
      "fieldName": "node",
      "pipelineFunctions": undefined,
      "typeName": "Query",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Query.getUser.ts
import { get } from "@aws-appsync/utils/dynamodb";
import { util } from "@aws-appsync/utils";
function request(ctx) {
  return get({ key: { id: ctx.args.id } });
}
function response(ctx) {
  if (ctx.error) {
    return util.error(ctx.error.message, ctx.error.type);
  }
  return ctx.result;
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1F1ZXJ5LmdldFVzZXIudHMiXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsU0FBUyxXQUFXO0FBS3BCLFNBQWlDLFlBQVk7QUFFdEMsU0FBUyxRQUFRLEtBQXFEO0FBQzNFLFNBQU8sSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUN6QztBQUNPLFNBQVMsU0FBUyxLQUFtQztBQUMxRCxNQUFJLElBQUksT0FBTztBQUNiLFdBQU8sS0FBSyxNQUFNLElBQUksTUFBTSxTQUFTLElBQUksTUFBTSxJQUFJO0FBQUEsRUFDckQ7QUFDQSxTQUFPLElBQUk7QUFDYjsiLAogICJuYW1lcyI6IFtdCn0K
",
      "dataSource": "TestDataSource",
      "fieldName": "getUser",
      "pipelineFunctions": undefined,
      "typeName": "Query",
    },
    {
      "code": "// packages/graphql-transformer/__generated__/resolvers/Query.listUsers.ts
import { query } from "@aws-appsync/utils/dynamodb";
import { util as util2 } from "@aws-appsync/utils";

// packages/appsync-utils/dist/format.js
function formatConnection(props) {
  const { items, prevToken, nextToken, ...rest } = props;
  const edges = items.filter(Boolean).map((item) => ({
    cursor: util.base64Encode(item.id),
    node: item
  }));
  const pageInfo = {
    hasNextPage: Boolean(nextToken),
    hasPreviousPage: Boolean(prevToken),
    endCursor: nextToken || null,
    startCursor: prevToken || null
  };
  return { edges, pageInfo, ...rest };
}

// packages/graphql-transformer/__generated__/resolvers/Query.listUsers.ts
function request(ctx) {
  return query({
    query: { sourceId: "User" },
    filter: ctx.args.filter,
    limit: ctx.args.first ?? 100,
    nextToken: ctx.args.after ?? void 0,
    scanIndexForward: ctx.args.sort === "ASC",
    index: "byTypename"
  });
}
function response(ctx) {
  if (ctx.error) {
    return util2.error(ctx.error.message, ctx.error.type);
  }
  return formatConnection({
    items: ctx.result.items,
    prevToken: ctx.args.after,
    nextToken: ctx.result.nextToken
  });
}
export {
  request,
  response
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsicmVzb2x2ZXJzL1F1ZXJ5Lmxpc3RVc2Vycy50cyIsICIuLi8uLi9hcHBzeW5jLXV0aWxzL2Rpc3QvZm9ybWF0LmpzIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLFNBQVMsYUFBYTtBQUt0QixTQUErQixRQUFBQSxhQUFZOzs7QUNMcEMsU0FBUyxpQkFBaUIsT0FBTztBQUNwQyxRQUFNLEVBQUUsT0FBTyxXQUFXLFdBQVcsR0FBRyxLQUFLLElBQUk7QUFDakQsUUFBTSxRQUFRLE1BQU0sT0FBTyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVU7QUFBQSxJQUMvQyxRQUFRLEtBQUssYUFBYSxLQUFLLEVBQUU7QUFBQSxJQUNqQyxNQUFNO0FBQUEsRUFDVixFQUFFO0FBQ0YsUUFBTSxXQUFXO0FBQUEsSUFDYixhQUFhLFFBQVEsU0FBUztBQUFBLElBQzlCLGlCQUFpQixRQUFRLFNBQVM7QUFBQSxJQUNsQyxXQUFXLGFBQWE7QUFBQSxJQUN4QixhQUFhLGFBQWE7QUFBQSxFQUM5QjtBQUNBLFNBQU8sRUFBRSxPQUFPLFVBQVUsR0FBRyxLQUFLO0FBQ3RDOzs7QURMTyxTQUFTLFFBQVEsS0FBcUQ7QUFDM0UsU0FBTyxNQUFNO0FBQUEsSUFDWCxPQUFPLEVBQUUsVUFBVSxPQUFPO0FBQUEsSUFDMUIsUUFBUSxJQUFJLEtBQUs7QUFBQSxJQUNqQixPQUFPLElBQUksS0FBSyxTQUFTO0FBQUEsSUFDekIsV0FBVyxJQUFJLEtBQUssU0FBUztBQUFBLElBQzdCLGtCQUFrQixJQUFJLEtBQUssU0FBUztBQUFBLElBQ3BDLE9BQU87QUFBQSxFQUNULENBQUM7QUFDSDtBQUNPLFNBQVMsU0FBUyxLQUErQztBQUN0RSxNQUFJLElBQUksT0FBTztBQUNiLFdBQU9DLE1BQUssTUFBTSxJQUFJLE1BQU0sU0FBUyxJQUFJLE1BQU0sSUFBSTtBQUFBLEVBQ3JEO0FBQ0EsU0FBTyxpQkFBaUI7QUFBQSxJQUN0QixPQUFPLElBQUksT0FBTztBQUFBLElBQ2xCLFdBQVcsSUFBSSxLQUFLO0FBQUEsSUFDcEIsV0FBVyxJQUFJLE9BQU87QUFBQSxFQUN4QixDQUFDO0FBQ0g7IiwKICAibmFtZXMiOiBbInV0aWwiLCAidXRpbCJdCn0K
",
      "dataSource": "TestDataSource",
      "fieldName": "listUsers",
      "pipelineFunctions": undefined,
      "typeName": "Query",
    },
  ],
  "pipelineFunctions": [],
  "schema": "enum UserStatus {
  ACTIVE
  DISABLED
  SUSPENDED
}

type User implements Node {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
  picture: AWSURL
  status: UserStatus
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Task implements Node {
  id: ID!
  title: String
  content: AWSJSON
  schedule: Schedule
  rrule: RRule
  recurrenceId: ID
  occurrenceId: String
  labels(filter: LabelEdgeFilterInput, first: Int, after: String, sort: SortDirection): LabelConnection!
  occurrences(filter: TaskFilterInput, first: Int, after: String, sort: SortDirection): TaskConnection!
  subtasks(filter: TaskFilterInput, first: Int, after: String, sort: SortDirection): TaskConnection!
  artifacts(filter: ArtifactEdgeFilterInput, first: Int, after: String, sort: SortDirection): ArtifactConnection!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type RRule {
  dtStart: AWSDateTime
  until: AWSDateTime
  ruleStr: String
}

type Schedule {
  startDate: DateTimeZone
  duration: String
  dueDate: DateTimeZone
}

type DateTimeZone {
  date: AWSDateTime
  timezone: String
}

type Label implements Node {
  id: ID!
  name: String
  color: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type File implements Node {
  name: String
  size: Int
  url: AWSURL
  mimeType: String
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type TimeTracker implements Node {
  duration: String
  logs: [TimeLog!]
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type TimeLog {
  action: TimeLogAction!
  timestamp: AWSTimestamp!
}

enum TimeLogAction {
  START
  PAUSE
  END
  LOG
}

union Artifact = File | TimeTracker

type Viewer {
  user: User
  tasks(filter: TaskFilterInput, first: Int, after: String, sort: SortDirection): TaskConnection!
  labels(filter: LabelFilterInput, first: Int, after: String, sort: SortDirection): LabelConnection!
}

type Query {
  viewer: Viewer!
  node(id: ID!): Node
  getUser(id: ID!): User
  listUsers(filter: UserFilterInput, first: Int, after: String, sort: SortDirection): UserConnection!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

input SizeFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int!]
}

input StringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  notContains: String
  between: [String!]
  beginsWith: String
  attributeExists: Boolean
  size: SizeFilterInput
}

input IntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int!]
  between: [Int!]
  attributeExists: Boolean
}

input FloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  in: [Float!]
  between: [Float!]
  attributeExists: Boolean
}

input BooleanFilterInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
}

input IDFilterInput {
  ne: ID
  eq: ID
  in: [ID!]
  attributeExists: Boolean
}

input ListFilterInput {
  contains: String
  notContains: String
  size: SizeFilterInput
}

enum SortDirection {
  ASC
  DESC
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(id: ID!): User
  upsertTask(input: UpsertTaskInput!): Task
  deleteTask(id: ID!): Task
  createLabelEdge(input: LabelEdgeInput!): LabelEdge
  deleteLabelEdge(input: LabelEdgeInput!): LabelEdge
  createArtifactEdge(input: ArtifactEdgeInput!): ArtifactEdge
  deleteArtifactEdge(input: ArtifactEdgeInput!): ArtifactEdge
  upsertLabel(input: UpsertLabelInput!): Label
  deleteLabel(id: ID!): Label
  upsertFile(input: UpsertFileInput!): File
  deleteFile(id: ID!): File
  upsertTimeTracker(input: UpsertTimeTrackerInput!): TimeTracker
  deleteTimeTracker(id: ID!): TimeTracker
}

input CreateUserInput {
  id: ID
  firstName: String
  lastName: String
  email: AWSEmail
  picture: AWSURL
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpdateUserInput {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
  picture: AWSURL
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input DateTimeZoneInput {
  date: AWSDateTime
  timezone: String
}

input ScheduleInput {
  startDate: DateTimeZoneInput
  duration: String
  dueDate: DateTimeZoneInput
}

input RRuleInput {
  dtStart: AWSDateTime
  until: AWSDateTime
  ruleStr: String
}

input UpsertTaskInput {
  id: ID
  title: String
  content: AWSJSON
  schedule: ScheduleInput
  rrule: RRuleInput
  recurrenceId: ID
  occurrenceId: String
  sourceId: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type LabelConnection {
  edges: [LabelEdge!]!
  pageInfo: PageInfo!
}

type LabelEdge {
  cursor: String
  node: Label
}

input LabelEdgeFilterInput {
  createdAt: StringFilterInput
  updatedAt: StringFilterInput
  and: [LabelEdgeFilterInput]
  or: [LabelEdgeFilterInput]
  not: LabelEdgeFilterInput
}

input LabelEdgeInput {
  sourceId: ID!
  targetId: ID!
}

type TaskConnection {
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type TaskEdge {
  cursor: String
  node: Task
}

input TaskFilterInput {
  id: IDFilterInput
  title: StringFilterInput
  content: StringFilterInput
  recurrenceId: IDFilterInput
  occurrenceId: StringFilterInput
  createdAt: StringFilterInput
  updatedAt: StringFilterInput
  and: [TaskFilterInput]
  or: [TaskFilterInput]
  not: TaskFilterInput
}

type ArtifactConnection {
  edges: [ArtifactEdge!]!
  pageInfo: PageInfo!
}

type ArtifactEdge {
  cursor: String
  node: Artifact
}

input ArtifactEdgeFilterInput {
  createdAt: StringFilterInput
  updatedAt: StringFilterInput
  and: [ArtifactEdgeFilterInput]
  or: [ArtifactEdgeFilterInput]
  not: ArtifactEdgeFilterInput
}

input ArtifactEdgeInput {
  sourceId: ID!
  targetId: ID!
}

input UpsertLabelInput {
  id: ID
  name: String
  color: String
  sourceId: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input UpsertFileInput {
  name: String
  size: Int
  url: AWSURL
  mimeType: String
  sourceId: ID
  id: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input TimeLogInput {
  action: TimeLogAction
  timestamp: AWSTimestamp
}

input UpsertTimeTrackerInput {
  duration: String
  logs: TimeLogInput
  sourceId: ID
  id: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input LabelFilterInput {
  id: IDFilterInput
  name: StringFilterInput
  color: StringFilterInput
  createdAt: StringFilterInput
  updatedAt: StringFilterInput
  and: [LabelFilterInput]
  or: [LabelFilterInput]
  not: LabelFilterInput
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String
  node: User
}

input UserStatusFilterInput {
  eq: UserStatus
  ne: UserStatus
  in: [UserStatus!]
  attributeExists: Boolean
}

input UserFilterInput {
  id: IDFilterInput
  firstName: StringFilterInput
  lastName: StringFilterInput
  email: StringFilterInput
  picture: StringFilterInput
  status: UserStatusFilterInput
  createdAt: StringFilterInput
  updatedAt: StringFilterInput
  and: [UserFilterInput]
  or: [UserFilterInput]
  not: UserFilterInput
}",
}
`;
