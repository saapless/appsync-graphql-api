// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ExecutableSchemaGenerator generates executable schema 1`] = `
"type User implements Node {
  id: ID!
  name: String!
  email: String!
  role: UserRole!
  tasks(filter: TaskFilterInput, first: Int, after: String, sort: SortDirection): TaskConnection!
  createdAt: String
  updatedAt: String
}

enum UserRole {
  ADMIN
  USER
}

type Task implements Node {
  id: ID!
  title: String!
  description: String!
  user: User!
  createdAt: String
  updatedAt: String
}

type Query {
  viewer: User
  node(id: ID!): Node
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

input SizeFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int!]
}

input StringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  notContains: String
  between: [String!]
  beginsWith: String
  attributeExists: Boolean
  size: SizeFilterInput
}

input IntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int!]
  between: [Int!]
  attributeExists: Boolean
}

input FloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  in: [Float!]
  between: [Float!]
  attributeExists: Boolean
}

input BooleanFilterInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
}

input IDFilterInput {
  ne: ID
  eq: ID
  in: [ID!]
  attributeExists: Boolean
}

input ListFilterInput {
  contains: String
  notContains: String
  size: SizeFilterInput
}

enum SortDirection {
  ASC
  DESC
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(id: ID!): User
  createTask(input: CreateTaskInput!): Task
  updateTask(input: UpdateTaskInput!): Task
  deleteTask(id: ID!): Task
}

input CreateUserInput {
  id: ID!
  name: String
  email: String
  role: UserRole
  createdAt: String
  updatedAt: String
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  role: UserRole
  createdAt: String
  updatedAt: String
}

type TaskConnection {
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type TaskEdge {
  cursor: String
  node: Task
}

input TaskFilterInput {
  id: IDFilterInput
  title: StringFilterInput
  description: StringFilterInput
  and: [TaskFilterInput]
  or: [TaskFilterInput]
  not: TaskFilterInput
}

input CreateTaskInput {
  id: ID!
  title: String
  description: String
  sourceId: ID
  userId: ID
  createdAt: String
  updatedAt: String
}

input UpdateTaskInput {
  id: ID!
  title: String
  description: String
  sourceId: ID
  userId: ID
  createdAt: String
  updatedAt: String
}"
`;
