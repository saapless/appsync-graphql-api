// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GraphQLTransformer runs schema transformations respond with valid output 1`] = `
{
  "fieldResolvers": {
    "Mutation.createUser": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "createUser",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    "Mutation.deleteFile": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "deleteFile",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    "Mutation.deleteLabel": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "deleteLabel",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    "Mutation.deleteTask": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "deleteTask",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    "Mutation.deleteTimeTracker": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "deleteTimeTracker",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    "Mutation.deleteUser": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "deleteUser",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    "Mutation.updateUser": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "updateUser",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    "Mutation.upsertFile": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "upsertFile",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    "Mutation.upsertLabel": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "upsertLabel",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    "Mutation.upsertTask": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "upsertTask",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    "Mutation.upsertTimeTracker": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "upsertTimeTracker",
      "pipelineFunctions": undefined,
      "typeName": "Mutation",
    },
    "Query.getUser": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "getUser",
      "pipelineFunctions": undefined,
      "typeName": "Query",
    },
    "Query.listUsers": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "listUsers",
      "pipelineFunctions": undefined,
      "typeName": "Query",
    },
    "Query.node": {
      "code": "import { util } from "@aws-appsync/utils";
import { get } from "@aws-appsync/utils/dynamodb";
export function request(ctx) {
  return get({ key: { id: ctx.args.id } })
}

export function response(ctx) {
  return ctx.result
}
",
      "dataSource": undefined,
      "fieldName": "node",
      "pipelineFunctions": undefined,
      "typeName": "Query",
    },
    "Task.artifacts": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "artifacts",
      "pipelineFunctions": undefined,
      "typeName": "Task",
    },
    "Task.labels": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "labels",
      "pipelineFunctions": undefined,
      "typeName": "Task",
    },
    "Task.occurrences": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "occurrences",
      "pipelineFunctions": undefined,
      "typeName": "Task",
    },
    "Task.subtasks": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "subtasks",
      "pipelineFunctions": undefined,
      "typeName": "Task",
    },
    "Viewer.labels": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "labels",
      "pipelineFunctions": undefined,
      "typeName": "Viewer",
    },
    "Viewer.tasks": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "tasks",
      "pipelineFunctions": undefined,
      "typeName": "Viewer",
    },
    "Viewer.user": {
      "code": "export function request(ctx) {

}

export function response(ctx) {
  const { error, result } = ctx
  if (error) {
    util.error(error.message, erorr.type)
  }
  
  return result
}
",
      "dataSource": undefined,
      "fieldName": "user",
      "pipelineFunctions": undefined,
      "typeName": "Viewer",
    },
  },
  "pipelineFunctions": {},
  "schema": "type Viewer {
  user: User @connection(relation: oneOne, key: "userId", ref: "source.userId", index: null)
  tasks(filter: TaskFilterInput, first: Int, after: String, sort: [ModelSortDirection!]): TaskConnection! @edges
  labels(filter: LabelFilterInput, first: Int, after: String, sort: [ModelSortDirection!]): LabelConnection! @edges
  userId: ID @writeonly
}

interface Node {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
  _deleted: Boolean @readonly
}

enum UserStatus {
  ACTIVE
  DISABLED
  SUSPENDED
}

type User implements Node @model {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
  picture: AWSURL
  status: UserStatus @readonly
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
  _deleted: Boolean @readonly
}

type Task implements Node @model(operations: [upsert, delete]) {
  id: ID!
  title: String
  content: AWSJSON
  schedule: Schedule
  rrule: RRule
  recurrenceId: ID
  occurrenceId: String
  labels(filter: LabelFilterInput, first: Int, after: String, sort: [ModelSortDirection!]): LabelConnection! @connection(relation: "manyMany")
  subtasks(filter: TaskFilterInput, first: Int, after: String, sort: [ModelSortDirection!]): TaskConnection! @edges
  artifacts(first: Int, after: String, sort: [ModelSortDirection!]): ArtifactConnection! @edges
  occurrences(filter: TaskFilterInput, first: Int, after: String, sort: [ModelSortDirection!]): TaskConnection! @edges
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
  _deleted: Boolean @readonly
}

type RRule {
  dtStart: AWSDateTime
  until: AWSDateTime
  ruleStr: String
}

type Schedule {
  startDate: DateTimeZone
  duration: String
  dueDate: DateTimeZone
}

type DateTimeZone {
  date: AWSDateTime
  timezone: String
}

type Label implements Node @model(operations: [upsert, delete]) {
  id: ID!
  name: String
  color: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
  _deleted: Boolean @readonly
}

type File implements Node @model(operations: [upsert, delete]) {
  name: String
  size: Int
  url: AWSURL
  mimeType: String
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
  _deleted: Boolean @readonly
}

type TimeTracker implements Node @model(operations: [upsert, delete]) {
  duration: String
  logs: [TimeLog!]
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
  _deleted: Boolean @readonly
}

type TimeLog {
  action: TimeLogAction!
  timestamp: AWSTimestamp!
}

enum TimeLogAction {
  START
  PAUSE
  END
  LOG
}

union Artifact = File | TimeTracker

type Query {
  viewer: Viewer!
  node(id: ID!): Node
  getUser(id: ID!): User
  listUsers: User @connection(relation: oneMany, key: "__typename", index: "byTypename")
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int!]
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  notContains: String
  between: [String!]
  beginsWith: String
  attributeExists: Boolean
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int!]
  between: [Int!]
  attributeExists: Boolean
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  in: [Float!]
  between: [Float!]
  attributeExists: Boolean
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
}

input ModelIDInput {
  ne: ID
  eq: ID
  in: [ID!]
  attributeExists: Boolean
}

input ModelListInput {
  contains: String
  notContains: String
  size: ModelSizeInput
}

enum SortDirection {
  ASC
  DESC
}

enum ConnectionRelationType {
  oneOne
  oneMany
  manyMany
}

directive @connection(relation: ConnectionRelationType, key: String, ref: String, index: String) on FIELD_DEFINITION | OBJECT

directive @node(key: String, ref: String, index: String) on FIELD_DEFINITION

directive @edges(key: String, ref: String, index: String) on FIELD_DEFINITION

directive @ignoreConnection on FIELD_DEFINITION

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

directive @auth on OBJECT | FIELD_DEFINITION | INTERFACE

directive @dataSource(source: String!) on OBJECT

type TaskConnection {
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type TaskEdge {
  cursor: String
  node: Task
}

input TaskFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  content: ModelStringInput
  recurrenceId: ModelIDInput
  occurrenceId: ModelStringInput
  and: [TaskFilterInput]
  or: [TaskFilterInput]
  not: TaskFilterInput
}

type LabelConnection {
  edges: [LabelEdge!]!
  pageInfo: PageInfo!
}

type LabelEdge {
  cursor: String
  node: Label
}

input LabelFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  color: ModelStringInput
  and: [LabelFilterInput]
  or: [LabelFilterInput]
  not: LabelFilterInput
}

input CreateUserInput {
  id: id
  firstName: String
  lastName: String
  email: AWSEmail
  picture: AWSURL
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: _version
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  upsertTask(input: UpsertTaskInput!): Task
  deleteTask(input: DeleteTaskInput!): Task
  upsertLabel(input: UpsertLabelInput!): Label
  deleteLabel(input: DeleteLabelInput!): Label
  upsertFile(input: UpsertFileInput!): File
  deleteFile(input: DeleteFileInput!): File
  upsertTimeTracker(input: UpsertTimeTrackerInput!): TimeTracker
  deleteTimeTracker(input: DeleteTimeTrackerInput!): TimeTracker
}

input UpdateUserInput {
  id: id
  firstName: String
  lastName: String
  email: AWSEmail
  picture: AWSURL
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: _version
}

input DeleteUserInput {
  id: ID!
  _version: Int!
}

input DateTimeZoneInput {
  date: AWSDateTime
  timezone: String
}

input ScheduleInput {
  startDate: DateTimeZoneInput
  duration: String
  dueDate: DateTimeZoneInput
}

input RRuleInput {
  dtStart: AWSDateTime
  until: AWSDateTime
  ruleStr: String
}

input UpsertTaskInput {
  id: id
  title: String
  content: AWSJSON
  schedule: ScheduleInput
  rrule: RRuleInput
  recurrenceId: ID
  occurrenceId: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: _version
}

input DeleteTaskInput {
  id: ID!
  _version: Int!
}

type ArtifactConnection {
  edges: [ArtifactEdge!]!
  pageInfo: PageInfo!
}

type ArtifactEdge {
  cursor: String
  node: Artifact
}

input UpsertLabelInput {
  id: id
  name: String
  color: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: _version
}

input DeleteLabelInput {
  id: ID!
  _version: Int!
}

input UpsertFileInput {
  name: String
  size: Int
  url: AWSURL
  mimeType: String
  id: id
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: _version
}

input DeleteFileInput {
  id: ID!
  _version: Int!
}

input TimeLogInput {
  action: TimeLogAction
  timestamp: AWSTimestamp
}

input UpsertTimeTrackerInput {
  duration: String
  logs: TimeLogInput
  id: id
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: _version
}

input DeleteTimeTrackerInput {
  id: ID!
  _version: Int!
}",
}
`;
