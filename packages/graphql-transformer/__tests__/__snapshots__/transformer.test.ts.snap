// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GraphQLTransformer runs schema transformations NodeInterfacePlugin trnsformations adds Query.node resolver 1`] = `
"import { type Context } from "@aws-appsync/utils";

export function request(ctx: Context) {
  return {}
}

export function response(ctx: Context) {
  return ctx.result
}
"
`;

exports[`GraphQLTransformer runs schema transformations creates valid schema 1`] = `
"type Viewer {
  user: User @node
  tasks: TaskConnection! @edges
  labels: LabelConnection! @edges
}

interface Node {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
  _deleted: Boolean @readonly
}

enum UserStatus {
  ACTIVE
  DISABLED
  SUSPENDED
}

type User implements Node @model {
  id: ID!
  firstName: String
  lastName: String
  email: AWSEmail
  picture: AWSURL
  status: UserStatus @readonly
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
  _deleted: Boolean @readonly
}

type Task implements Node @model(operations: [upsert, delete]) {
  id: ID!
  title: String
  content: AWSJSON
  schedule: Schedule
  rrule: RRule
  recurrenceId: ID
  occurrenceId: String
  labels: LabelConnection! @connection(relation: "manyMany")
  subtasks: TaskConnection! @edges
  artifacts: ArtifactConnection! @edges(relation: "manyMany")
  occurrences: TaskConnection! @edges(relation: "oneMany")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
  _deleted: Boolean @readonly
}

type RRule {
  dtStart: AWSDateTime
  until: AWSDateTime
  ruleStr: String
}

type Schedule {
  startDate: DateTimeZone
  duration: String
  dueDate: DateTimeZone
}

type DateTimeZone {
  date: AWSDateTime
  timezone: String
}

type Label implements Node @model(operations: [upsert, delete]) {
  id: ID!
  name: String
  color: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
  _deleted: Boolean @readonly
}

type File implements Node @model(operations: [upsert, delete]) {
  name: String
  size: Int
  url: AWSURL
  mimeType: String
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
  _deleted: Boolean @readonly
}

type TimeTracker implements Node @model(operations: [upsert, delete]) {
  duration: String
  logs: [TimeLog!]
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
  _deleted: Boolean @readonly
}

type TimeLog {
  action: TimeLogAction!
  timestamp: AWSTimestamp!
}

enum TimeLogAction {
  START
  PAUSE
  END
  LOG
}

union Artifact = File | TimeTracker

type Query {
  viewer: Viewer!
  node(id: ID!): Node
  getUser(id: ID!): User
  listUsers(filter: UserFilterInput, first: Int, after: String, sort: SortDirection): User
}

scalar AWSDate

scalar AWSTime

scalar AWSDateTime

scalar AWSTimestamp

scalar AWSEmail

scalar AWSJSON

scalar AWSPhone

scalar AWSURL

scalar AWSIPAddress

directive @aws_api_key on FIELD_DEFINITION | OBJECT

directive @aws_auth(cognito_groups: [String!]!) on FIELD_DEFINITION | OBJECT

directive @aws_cognito_user_pools(cognito_groups: [String!]!) on FIELD_DEFINITION | OBJECT

directive @aws_lambda on FIELD_DEFINITION | OBJECT

directive @aws_oidc on FIELD_DEFINITION | OBJECT

directive @aws_subscribe(mutations: [String!]!) on FIELD_DEFINITION

directive @auth on OBJECT | FIELD_DEFINITION | INTERFACE

enum ModelOperation {
  create
  update
  upsert
  delete
  get
  list
}

directive @model(operations: [ModelOperation!]) on OBJECT

directive @readonly on OBJECT | FIELD_DEFINITION

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int!]
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  notContains: String
  between: [String!]
  beginsWith: String
  attributeExists: Boolean
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int!]
  between: [Int!]
  attributeExists: Boolean
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  in: [Float!]
  between: [Float!]
  attributeExists: Boolean
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
}

input ModelIDInput {
  ne: ID
  eq: ID
  in: [ID!]
  attributeExists: Boolean
}

input ModelListInput {
  contains: String
  notContains: String
  size: ModelSizeInput
}

enum SortDirection {
  ASC
  DESC
}

enum ConnectionRelationType {
  oneOne
  oneMany
  manyOne
  manyMany
}

directive @connection(relation: ConnectionRelationType) on FIELD_DEFINITION | OBJECT

directive @node(key: String) on FIELD_DEFINITION

directive @edges(key: String, relation: ConnectionRelationType) on FIELD_DEFINITION

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

directive @dataSource(source: String!) on OBJECT

type TaskConnection {
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type TaskEdge {
  cursor: String
  node: Task
}

type LabelConnection {
  edges: [LabelEdge!]!
  pageInfo: PageInfo!
}

type LabelEdge {
  cursor: String
  node: Label
}

input CreateUserInput {
  id: id
  firstName: String
  lastName: String
  email: AWSEmail
  picture: AWSURL
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: _version
}

type Mutation {
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  upsertTask(input: UpsertTaskInput!): Task
  deleteTask(input: DeleteTaskInput!): Task
  upsertLabel(input: UpsertLabelInput!): Label
  deleteLabel(input: DeleteLabelInput!): Label
  upsertFile(input: UpsertFileInput!): File
  deleteFile(input: DeleteFileInput!): File
  upsertTimeTracker(input: UpsertTimeTrackerInput!): TimeTracker
  deleteTimeTracker(input: DeleteTimeTrackerInput!): TimeTracker
}

input UpdateUserInput {
  id: id!
  firstName: String
  lastName: String
  email: AWSEmail
  picture: AWSURL
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: _version!
}

input DeleteUserInput {
  id: ID!
  _version: Int!
}

input UserStatusInput {
  eq: UserStatus
  ne: UserStatus
  in: [UserStatus!]
  attributeExists: Boolean
}

input UserFilterInput {
  id: ModelIDInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  email: ModelStringInput
  picture: ModelStringInput
  status: UserStatusInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  _version: ModelIntInput
  _deleted: ModelBooleanInput
  and: [UserFilterInput]
  or: [UserFilterInput]
  not: UserFilterInput
}

input DateTimeZoneInput {
  date: AWSDateTime
  timezone: String
}

input ScheduleInput {
  startDate: DateTimeZoneInput
  duration: String
  dueDate: DateTimeZoneInput
}

input RRuleInput {
  dtStart: AWSDateTime
  until: AWSDateTime
  ruleStr: String
}

input UpsertTaskInput {
  id: id
  title: String
  content: AWSJSON
  schedule: ScheduleInput
  rrule: RRuleInput
  recurrenceId: ID
  occurrenceId: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: _version
}

input DeleteTaskInput {
  id: ID!
  _version: Int!
}

type ArtifactConnection {
  edges: [ArtifactEdge!]!
  pageInfo: PageInfo!
}

type ArtifactEdge {
  cursor: String
  node: Artifact
}

input UpsertLabelInput {
  id: id
  name: String
  color: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: _version
}

input DeleteLabelInput {
  id: ID!
  _version: Int!
}

input UpsertFileInput {
  name: String
  size: Int
  url: AWSURL
  mimeType: String
  id: id
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: _version
}

input DeleteFileInput {
  id: ID!
  _version: Int!
}

input TimeLogInput {
  action: TimeLogAction
  timestamp: AWSTimestamp
}

input UpsertTimeTrackerInput {
  duration: String
  logs: TimeLogInput
  id: id
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: _version
}

input DeleteTimeTrackerInput {
  id: ID!
  _version: Int!
}"
`;
