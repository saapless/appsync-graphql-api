{
  "schema": "type Viewer {\n  user: User @node\n  tasks: TaskConnection! @edges\n  labels: LabelConnection! @edges\n}\n\ninterface Node {\n  id: ID!\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  _version: Int\n  _deleted: Boolean @readonly\n}\n\nenum UserStatus {\n  ACTIVE\n  DISABLED\n  SUSPENDED\n}\n\ntype User implements Node @model {\n  id: ID!\n  firstName: String\n  lastName: String\n  email: AWSEmail\n  picture: AWSURL\n  status: UserStatus @readonly\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  _version: Int\n  _deleted: Boolean @readonly\n}\n\ntype Task implements Node @model(operations: [upsert, delete]) {\n  id: ID!\n  title: String\n  content: AWSJSON\n  schedule: Schedule\n  rrule: RRule\n  recurrenceId: ID\n  occurrenceId: String\n  labels: LabelConnection! @connection(relation: \"manyMany\")\n  subtasks: TaskConnection! @edges\n  artifacts: ArtifactConnection! @edges(relation: \"manyMany\")\n  occurrences: TaskConnection! @edges(relation: \"oneMany\")\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  _version: Int\n  _deleted: Boolean @readonly\n}\n\ntype RRule {\n  dtStart: AWSDateTime\n  until: AWSDateTime\n  ruleStr: String\n}\n\ntype Schedule {\n  startDate: DateTimeZone\n  duration: String\n  dueDate: DateTimeZone\n}\n\ntype DateTimeZone {\n  date: AWSDateTime\n  timezone: String\n}\n\ntype Label implements Node @model(operations: [upsert, delete]) {\n  id: ID!\n  name: String\n  color: String\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  _version: Int\n  _deleted: Boolean @readonly\n}\n\ntype File implements Node @model(operations: [upsert, delete]) {\n  name: String\n  size: Int\n  url: AWSURL\n  mimeType: String\n  id: ID!\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  _version: Int\n  _deleted: Boolean @readonly\n}\n\ntype TimeTracker implements Node @model(operations: [upsert, delete]) {\n  duration: String\n  logs: [TimeLog!]\n  id: ID!\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  _version: Int\n  _deleted: Boolean @readonly\n}\n\ntype TimeLog {\n  action: TimeLogAction!\n  timestamp: AWSTimestamp!\n}\n\nenum TimeLogAction {\n  START\n  PAUSE\n  END\n  LOG\n}\n\nunion Artifact = File | TimeTracker\n\ntype Query {\n  viewer: Viewer!\n  node(id: ID!): Node\n  getUser(id: ID!): User\n  listUsers(filter: UserFilterInput, first: Int, after: String, sort: SortDirection): User\n}\n\nscalar AWSDate\n\nscalar AWSTime\n\nscalar AWSDateTime\n\nscalar AWSTimestamp\n\nscalar AWSEmail\n\nscalar AWSJSON\n\nscalar AWSPhone\n\nscalar AWSURL\n\nscalar AWSIPAddress\n\ndirective @aws_api_key on FIELD_DEFINITION | OBJECT\n\ndirective @aws_auth(cognito_groups: [String!]!) on FIELD_DEFINITION | OBJECT\n\ndirective @aws_cognito_user_pools(cognito_groups: [String!]!) on FIELD_DEFINITION | OBJECT\n\ndirective @aws_lambda on FIELD_DEFINITION | OBJECT\n\ndirective @aws_oidc on FIELD_DEFINITION | OBJECT\n\ndirective @aws_subscribe(mutations: [String!]!) on FIELD_DEFINITION\n\ndirective @auth on OBJECT | FIELD_DEFINITION | INTERFACE\n\nenum ModelOperation {\n  create\n  update\n  upsert\n  delete\n  get\n  list\n}\n\ndirective @model(operations: [ModelOperation!]) on OBJECT\n\ndirective @readonly on OBJECT | FIELD_DEFINITION\n\ninput ModelSizeInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int!]\n}\n\ninput ModelStringInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  in: [String!]\n  contains: String\n  notContains: String\n  between: [String!]\n  beginsWith: String\n  attributeExists: Boolean\n  size: ModelSizeInput\n}\n\ninput ModelIntInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  in: [Int!]\n  between: [Int!]\n  attributeExists: Boolean\n}\n\ninput ModelFloatInput {\n  ne: Float\n  eq: Float\n  le: Float\n  lt: Float\n  ge: Float\n  gt: Float\n  in: [Float!]\n  between: [Float!]\n  attributeExists: Boolean\n}\n\ninput ModelBooleanInput {\n  ne: Boolean\n  eq: Boolean\n  attributeExists: Boolean\n}\n\ninput ModelIDInput {\n  ne: ID\n  eq: ID\n  in: [ID!]\n  attributeExists: Boolean\n}\n\ninput ModelListInput {\n  contains: String\n  notContains: String\n  size: ModelSizeInput\n}\n\nenum SortDirection {\n  ASC\n  DESC\n}\n\nenum ConnectionRelationType {\n  oneOne\n  oneMany\n  manyOne\n  manyMany\n}\n\ndirective @connection(relation: ConnectionRelationType) on FIELD_DEFINITION | OBJECT\n\ndirective @node(key: String) on FIELD_DEFINITION\n\ndirective @edges(key: String, relation: ConnectionRelationType) on FIELD_DEFINITION\n\ntype PageInfo {\n  hasNextPage: Boolean\n  hasPreviousPage: Boolean\n  startCursor: String\n  endCursor: String\n}\n\ndirective @dataSource(source: String!) on OBJECT\n\ntype TaskConnection {\n  edges: [TaskEdge!]!\n  pageInfo: PageInfo!\n}\n\ntype TaskEdge {\n  cursor: String\n  node: Task\n}\n\ntype LabelConnection {\n  edges: [LabelEdge!]!\n  pageInfo: PageInfo!\n}\n\ntype LabelEdge {\n  cursor: String\n  node: Label\n}\n\ninput CreateUserInput {\n  id: id\n  firstName: String\n  lastName: String\n  email: AWSEmail\n  picture: AWSURL\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  _version: _version\n}\n\ntype Mutation {\n  createUser(input: CreateUserInput!): User\n  updateUser(input: UpdateUserInput!): User\n  deleteUser(input: DeleteUserInput!): User\n  upsertTask(input: UpsertTaskInput!): Task\n  deleteTask(input: DeleteTaskInput!): Task\n  upsertLabel(input: UpsertLabelInput!): Label\n  deleteLabel(input: DeleteLabelInput!): Label\n  upsertFile(input: UpsertFileInput!): File\n  deleteFile(input: DeleteFileInput!): File\n  upsertTimeTracker(input: UpsertTimeTrackerInput!): TimeTracker\n  deleteTimeTracker(input: DeleteTimeTrackerInput!): TimeTracker\n}\n\ninput UpdateUserInput {\n  id: id!\n  firstName: String\n  lastName: String\n  email: AWSEmail\n  picture: AWSURL\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  _version: _version!\n}\n\ninput DeleteUserInput {\n  id: ID!\n  _version: Int!\n}\n\ninput UserStatusInput {\n  eq: UserStatus\n  ne: UserStatus\n  in: [UserStatus!]\n  attributeExists: Boolean\n}\n\ninput UserFilterInput {\n  id: ModelIDInput\n  firstName: ModelStringInput\n  lastName: ModelStringInput\n  email: ModelStringInput\n  picture: ModelStringInput\n  status: UserStatusInput\n  createdAt: ModelStringInput\n  updatedAt: ModelStringInput\n  _version: ModelIntInput\n  _deleted: ModelBooleanInput\n  and: [UserFilterInput]\n  or: [UserFilterInput]\n  not: UserFilterInput\n}\n\ninput DateTimeZoneInput {\n  date: AWSDateTime\n  timezone: String\n}\n\ninput ScheduleInput {\n  startDate: DateTimeZoneInput\n  duration: String\n  dueDate: DateTimeZoneInput\n}\n\ninput RRuleInput {\n  dtStart: AWSDateTime\n  until: AWSDateTime\n  ruleStr: String\n}\n\ninput UpsertTaskInput {\n  id: id\n  title: String\n  content: AWSJSON\n  schedule: ScheduleInput\n  rrule: RRuleInput\n  recurrenceId: ID\n  occurrenceId: String\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  _version: _version\n}\n\ninput DeleteTaskInput {\n  id: ID!\n  _version: Int!\n}\n\ntype ArtifactConnection {\n  edges: [ArtifactEdge!]!\n  pageInfo: PageInfo!\n}\n\ntype ArtifactEdge {\n  cursor: String\n  node: Artifact\n}\n\ninput UpsertLabelInput {\n  id: id\n  name: String\n  color: String\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  _version: _version\n}\n\ninput DeleteLabelInput {\n  id: ID!\n  _version: Int!\n}\n\ninput UpsertFileInput {\n  name: String\n  size: Int\n  url: AWSURL\n  mimeType: String\n  id: id\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  _version: _version\n}\n\ninput DeleteFileInput {\n  id: ID!\n  _version: Int!\n}\n\ninput TimeLogInput {\n  action: TimeLogAction\n  timestamp: AWSTimestamp\n}\n\ninput UpsertTimeTrackerInput {\n  duration: String\n  logs: TimeLogInput\n  id: id\n  createdAt: AWSDateTime\n  updatedAt: AWSDateTime\n  _version: _version\n}\n\ninput DeleteTimeTrackerInput {\n  id: ID!\n  _version: Int!\n}",
  "fieldResolvers": {
    "Query.node": {
      "typeName": "Query",
      "fieldName": "node",
      "code": "import { util } from \"@aws-appsync/utils\";\nimport { get } from \"@aws-appsync/utils/dynamodb\";\nexport function request(ctx) {\n  return get({ key: { id: ctx.args.id } })\n}\n\nexport function response(ctx) {\n  return ctx.result\n}\n"
    },
    "Viewer.user": {
      "typeName": "Viewer",
      "fieldName": "user",
      "code": ""
    },
    "Viewer.tasks": {
      "typeName": "Viewer",
      "fieldName": "tasks",
      "code": ""
    },
    "Viewer.labels": {
      "typeName": "Viewer",
      "fieldName": "labels",
      "code": ""
    },
    "Mutation.createUser": {
      "typeName": "Mutation",
      "fieldName": "createUser",
      "code": ""
    },
    "Mutation.updateUser": {
      "typeName": "Mutation",
      "fieldName": "updateUser",
      "code": ""
    },
    "Mutation.deleteUser": {
      "typeName": "Mutation",
      "fieldName": "deleteUser",
      "code": ""
    },
    "Query.getUser": {
      "typeName": "Query",
      "fieldName": "getUser",
      "code": ""
    },
    "Query.listUsers": {
      "typeName": "Query",
      "fieldName": "listUsers",
      "code": ""
    },
    "Mutation.upsertTask": {
      "typeName": "Mutation",
      "fieldName": "upsertTask",
      "code": ""
    },
    "Mutation.deleteTask": {
      "typeName": "Mutation",
      "fieldName": "deleteTask",
      "code": ""
    },
    "Task.labels": {
      "typeName": "Task",
      "fieldName": "labels",
      "code": ""
    },
    "Task.subtasks": {
      "typeName": "Task",
      "fieldName": "subtasks",
      "code": ""
    },
    "Task.artifacts": {
      "typeName": "Task",
      "fieldName": "artifacts",
      "code": ""
    },
    "Task.occurrences": {
      "typeName": "Task",
      "fieldName": "occurrences",
      "code": ""
    },
    "Mutation.upsertLabel": {
      "typeName": "Mutation",
      "fieldName": "upsertLabel",
      "code": ""
    },
    "Mutation.deleteLabel": {
      "typeName": "Mutation",
      "fieldName": "deleteLabel",
      "code": ""
    },
    "Mutation.upsertFile": {
      "typeName": "Mutation",
      "fieldName": "upsertFile",
      "code": ""
    },
    "Mutation.deleteFile": {
      "typeName": "Mutation",
      "fieldName": "deleteFile",
      "code": ""
    },
    "Mutation.upsertTimeTracker": {
      "typeName": "Mutation",
      "fieldName": "upsertTimeTracker",
      "code": ""
    },
    "Mutation.deleteTimeTracker": {
      "typeName": "Mutation",
      "fieldName": "deleteTimeTracker",
      "code": ""
    },
    "TaskEdge.node": {
      "typeName": "TaskEdge",
      "fieldName": "node",
      "code": ""
    },
    "LabelEdge.node": {
      "typeName": "LabelEdge",
      "fieldName": "node",
      "code": ""
    },
    "ArtifactEdge.node": {
      "typeName": "ArtifactEdge",
      "fieldName": "node",
      "code": ""
    }
  },
  "pipelineFunctions": {}
}