type User implements Node {
  firstName: String
  lastName: String
  email: String
  picture: String
  id: ID!
  createdAt: String
  updatedAt: String
}

type Workspace implements Node {
  name: String
  owner: User
  id: ID!
  createdAt: String
  updatedAt: String
}

type Task implements Node {
  title: String!
  status: Status
  priority: Priority
  labels(filter: LabelEdgeFilterInput, first: Int, after: String, sort: SortDirection): LabelConnection!
  id: ID!
  createdAt: String
  updatedAt: String
}

interface TagProperty {
  title: String
}

type Status implements TagProperty & Node {
  title: String
  icon: String
  id: ID!
  createdAt: String
  updatedAt: String
}

type Priority implements TagProperty & Node {
  title: String
  value: Int!
  icon: String
  id: ID!
  createdAt: String
  updatedAt: String
}

type Label implements TagProperty & Node {
  title: String
  color: String
  id: ID!
  createdAt: String
  updatedAt: String
}

type Viewer {
  user: User
  workspace: Workspace
  tasks(filter: TaskFilterInput, first: Int, after: String, sort: SortDirection): TaskConnection!
}

type Query {
  viewer: Viewer
  node(id: ID!): Node
  getStatus(id: ID!): Status
  listStatuses(filter: StatusFilterInput, first: Int, after: String, sort: SortDirection): StatusConnection!
  getPriority(id: ID!): Priority
  listPriorities(filter: PriorityFilterInput, first: Int, after: String, sort: SortDirection): PriorityConnection!
  getLabel(id: ID!): Label
  listLabels(filter: LabelFilterInput, first: Int, after: String, sort: SortDirection): LabelConnection!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

input SizeFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int!]
}

input StringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  notContains: String
  between: [String!]
  beginsWith: String
  attributeExists: Boolean
  size: SizeFilterInput
}

input IntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  in: [Int!]
  between: [Int!]
  attributeExists: Boolean
}

input FloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  in: [Float!]
  between: [Float!]
  attributeExists: Boolean
}

input BooleanFilterInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
}

input IDFilterInput {
  ne: ID
  eq: ID
  in: [ID!]
  attributeExists: Boolean
}

input ListFilterInput {
  contains: String
  notContains: String
  size: SizeFilterInput
}

enum SortDirection {
  ASC
  DESC
}

type Mutation {
  updateUser(input: UpdateUserInput!): User
  updateWorkspace(input: UpdateWorkspaceInput!): Workspace
  createTask(input: CreateTaskInput!): Task
  updateTask(input: UpdateTaskInput!): Task
  deleteTask(id: ID!): Task
  createLabelEdge(input: LabelEdgeInput!): LabelEdge
  deleteLabelEdge(input: LabelEdgeInput!): LabelEdge
  createStatus(input: CreateStatusInput!): Status
  updateStatus(input: UpdateStatusInput!): Status
  deleteStatus(id: ID!): Status
  createPriority(input: CreatePriorityInput!): Priority
  updatePriority(input: UpdatePriorityInput!): Priority
  deletePriority(id: ID!): Priority
  createLabel(input: CreateLabelInput!): Label
  updateLabel(input: UpdateLabelInput!): Label
  deleteLabel(id: ID!): Label
}

input UpdateUserInput {
  firstName: String
  lastName: String
  picture: String
  id: ID!
  createdAt: String
  updatedAt: String
}

input UpdateWorkspaceInput {
  name: String
  userId: ID
  id: ID!
  createdAt: String
  updatedAt: String
}

input CreateTaskInput {
  title: String
  statusId: ID
  priorityId: ID
  sourceId: ID
  id: ID!
  createdAt: String
  updatedAt: String
}

input UpdateTaskInput {
  title: String
  statusId: ID
  priorityId: ID
  sourceId: ID
  id: ID!
  createdAt: String
  updatedAt: String
}

type LabelConnection {
  edges: [LabelEdge!]!
  pageInfo: PageInfo!
}

type LabelEdge {
  cursor: String
  node: Label
}

input LabelEdgeFilterInput {
  createdAt: StringFilterInput
  updatedAt: StringFilterInput
  and: [LabelEdgeFilterInput]
  or: [LabelEdgeFilterInput]
  not: LabelEdgeFilterInput
}

input LabelEdgeInput {
  sourceId: ID!
  targetId: ID!
}

input CreateStatusInput {
  title: String
  icon: String
  id: ID!
  createdAt: String
  updatedAt: String
}

input UpdateStatusInput {
  title: String
  icon: String
  id: ID!
  createdAt: String
  updatedAt: String
}

input CreatePriorityInput {
  title: String
  value: Int
  icon: String
  id: ID!
  createdAt: String
  updatedAt: String
}

input UpdatePriorityInput {
  title: String
  value: Int
  icon: String
  id: ID!
  createdAt: String
  updatedAt: String
}

input CreateLabelInput {
  title: String
  color: String
  id: ID!
  createdAt: String
  updatedAt: String
}

input UpdateLabelInput {
  title: String
  color: String
  id: ID!
  createdAt: String
  updatedAt: String
}

type TaskConnection {
  edges: [TaskEdge!]!
  pageInfo: PageInfo!
}

type TaskEdge {
  cursor: String
  node: Task
}

input TaskFilterInput {
  title: StringFilterInput
  id: IDFilterInput
  createdAt: StringFilterInput
  updatedAt: StringFilterInput
  and: [TaskFilterInput]
  or: [TaskFilterInput]
  not: TaskFilterInput
}

type StatusConnection {
  edges: [StatusEdge!]!
  pageInfo: PageInfo!
}

type StatusEdge {
  cursor: String
  node: Status
}

input StatusFilterInput {
  title: StringFilterInput
  icon: StringFilterInput
  id: IDFilterInput
  createdAt: StringFilterInput
  updatedAt: StringFilterInput
  and: [StatusFilterInput]
  or: [StatusFilterInput]
  not: StatusFilterInput
}

type PriorityConnection {
  edges: [PriorityEdge!]!
  pageInfo: PageInfo!
}

type PriorityEdge {
  cursor: String
  node: Priority
}

input PriorityFilterInput {
  title: StringFilterInput
  value: IntFilterInput
  icon: StringFilterInput
  id: IDFilterInput
  createdAt: StringFilterInput
  updatedAt: StringFilterInput
  and: [PriorityFilterInput]
  or: [PriorityFilterInput]
  not: PriorityFilterInput
}

input LabelFilterInput {
  title: StringFilterInput
  color: StringFilterInput
  id: IDFilterInput
  createdAt: StringFilterInput
  updatedAt: StringFilterInput
  and: [LabelFilterInput]
  or: [LabelFilterInput]
  not: LabelFilterInput
}