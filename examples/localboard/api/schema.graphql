type User @model(operations: ["update"]) {
  firstName: String
  lastName: String
  email: String @readOnly
  picture: String
}

type Workspace @model(operations: ["update"]) {
  name: String
  owner: User @hasOne
}

type Task @model(operations: [write]) {
  title: String!
  status: Status @hasOne
  priority: Priority @hasOne
  labels: Label @hasMany(relation: "manyToMany")
}

interface TagProperty {
  title: String
}

type Status implements TagProperty @model {
  title: String
  icon: String
}

type Priority implements TagProperty @model {
  title: String
  value: Int!
  icon: String
}

type Label implements TagProperty @model {
  title: String
  color: String
}

type Viewer {
  id: ID! @serverOnly
  user: User @hasOne(key: { ref: "source.userId" })
  workspace: Workspace @hasOne(key: { ref: "source.workspaceId" })
  tasks: Task @hasMany(key: { eq: "Task" }, index: "__typename")
}

type Query {
  viewer: Viewer @hasOne(key: { eq: "root:viewer:id" })
}
